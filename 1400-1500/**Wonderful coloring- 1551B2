#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,k;
    cin>>n>>k;
    int a[n], ans[n];
    memset(ans, 0, sizeof ans);
    map<int,int> m1;
    map<int, vector<int>> m;
    vector<pair<int,int>> v(n);

    rep(i,n) {cin>> a[i]; m1[a[i]]++; m[a[i]].pb(i);   v[i].ff=a[i]; v[i].ss=i;}
    int nc=n;    
    int col=1, c1=1;
    for(auto i: m1){
        if(i.ss>=k){  nc-=i.ss;
            int count=0, c1=1;
            rep(j, m[i.ff].size()){
                if(count==min(k,i.ss)) { c1=1; break;}
                else {
                    int x= m[i.ff][j];
                    ans[x]=c1;
                    c1++;
                    count++;
                }
            }
        }

    }
    int c= nc- nc%k;
    sort(all(v));
    
    rep(i,n){
        if(c>0 ){
            if(m1[v[i].ff]<k){
            ans[v[i].ss]=col%k +1;
            col++;
            c--;
            }
        }
    }

    rep(i, n) cout<<ans[i]<<" "; cout<<endl;


}   
return 0;
}
