If we have to calculate shortest path( b/w layers. Ex- 2 buttons ques), then we have to use BFS.
For bipartite, we can also get away with dfs but not vs shortest dist.


#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> adj[100005];
vector<int> vis(100005, false); 
int dist[100005];
int n,m;
int flag=0;
void bfs(int k){
    
    queue<int> q;
    q.push(k);
    dist[k]=0;
 
    while(!q.empty()){
        int x= q.front(); 
        q.pop();
        
        for(auto i: adj[x]){
            if(dist[x]+1<dist[i]){
                dist[i]=dist[x]+1; 
                q.push(i);
            }
        } 
        if(x==m) break;
    }
}
 
int32_t main(){
FastHoviBaby
 
 
 
cin>>n>>m;
if(m<n){
    cout<<n-m;
    return 0;
}
 
  for(int i=1;i<25000;i++ ){
      adj[i].pb(i-1);
      adj[i].pb(i*2);
  }
    int x=1e12+2;
    memset(dist, x, sizeof dist );
    
    bfs(n);
    cout<<dist[m];
 
return 0;
}
