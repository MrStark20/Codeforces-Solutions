#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
const int N= 2e5+1; 
vector<vector<int>> adj;
 vector<bool> vis;
 vector<bool> vis2;
 vector<int> dis;
 vector<int>parent;

void dfs1(int n, int par){
    
        parent[n]=par;
        
        for(auto i: adj[n]){
            if(i!=par  ){
                dis[i]=1+dis[n];
                dfs1(i, n);
               
             
            }
        }
}

int dfs2(int n, int par,int vla){
    int ans=0;
   

    for(auto i: adj[n]){
        if(i!=par ){
           
           if(vis2[i]){  ans+=dfs2(i, n, vla);
            if(vis[i] )
                ans+=1;
            else
            ans+=2;   
           } 
           else
           ans-=1;
        }
    }

    return ans;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    
    int n,k;
    cin>>n>>k;

    int vla=0, nash=0;
    cin>>vla>>nash;

    adj.assign(n+1,{});
    vis.assign(n+1, false);
    vis2.assign(n+1, false);
    dis.assign(n+1, 0);

    vector<int> a;
    rep(i,k){
        int c;
        cin>>c;
        a.pb(c);
        vis2[c]=true;
    }
    a.pb(nash);

    
    rep(i,n-1){
        int x,y;
        cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
    }

    parent.assign(n+1, 0);

    for(int i=1;i<=n; i++) parent[i]=i;

   
     
    dfs1(vla,-1);

    
    
     int l=0;
   
    rep(i, a.size()){
        int val=a[i];
        while(!(val==vla || vis[val])){
            vis[val]=true;
            val=parent[val];
            l+= (ll)2;
        }
    }
    cout<<l - dis[nash] <<endl;
} 
return 0;
}
