#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,k;
cin>>n>>k;
   
    vector<pair<int,int>> v(n);
    map<pair<int,int>,int> m;
    rep(i,n){
        cin>>v[i].ff>>v[i].ss;
        m[{v[i].ff, v[i].ss}]++;
    }
    sort(all(v), greater<pair<int,int>>());

 //   for(int i=0;i<n;i++) cout<<v[i].ff<<" "<<v[i].ss<<endl;

    int flag=1;

    while(flag!=0){
        flag=0;
    rep(i,n-1){
        if(v[i].ff==v[i+1].ff && v[i].ss>v[i+1].ss){
            flag=1;
            swap(v[i].ss, v[i+1].ss);
        }
    }
    }


// for(int i=0;i<n;i++) cout<<v[i].ff<<" "<<v[i].ss<<endl;
   

    int count=0;
    vector<int> ans;
    for(int i=0;i<n;i++){
       if(m[{v[i].ff, v[i].ss}]!=0){
           count+=m[{v[i].ff, v[i].ss}];
           i+= (m[{v[i].ff, v[i].ss}]-1);
           if(count>=k) {
               cout<<m[{v[i].ff, v[i].ss}];
               break;
           }
       }else{
           count++;
            if(count==k) {
                 cout<<1;
                 break;
            }
       }
   }
        
     
return 0;
}
