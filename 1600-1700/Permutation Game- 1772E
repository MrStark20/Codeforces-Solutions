#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    vector<int> a(n+1);
    rep(i,n) cin>>a[i+1];

    int flag=0;
    int swap=0,swap2=0, common=0;

    queue<int> q1,q2;

    map<int,int> m,m1;

    for(int i=1;i<=n; i++){
        

        if(a[i]!=i && a[i]!= n-i+1) {common++; m1[i]++; continue;}

        if(a[i]!=i) {
            q1.push(i);
        }
        if(a[i]!= n-i+1) { 
            q2.push(i);
            swap2++;
        }
    }

    for(auto i: m1) {
        q1.push(i.ff);
        q2.push(i.ff);
    }

    int  tie=0;
    string ans="";

    for(int i=1; i<=n; i++){
        if(i%2==1){

                if(q2.empty()){
                    ans="Second";
                    break;
                }

              while(!q1.empty() && m.find(q1.front())!=m.end() ) q1.pop();

              if(!q1.empty() && q2.size()==1 && q1.front()==q2.front() )  {
                tie=1;
                break;
              }

              int x= q1.front();
              q1.pop();
              m[x]++;

               while(!q1.empty() && m.find(q1.front())!=m.end() ) q1.pop();


        }
        else{
            if(q1.empty()){
                    ans="First";
                    break;
                }

              while(!q2.empty() && m.find(q2.front())!=m.end() ) q2.pop();

              if(!q2.empty() && q1.size()==1 && q1.front()==q2.front() )  {
                tie=1;
                break;
              }

              int x= q2.front();
              q2.pop();
              m[x]++;

               while(!q2.empty() && m.find(q2.front())!=m.end() ) q2.pop();
        }
    }


   if(tie) cout<<"Tie"<<endl;
   else cout<<ans<<endl;

}
return 0;
}
