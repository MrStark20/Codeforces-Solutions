#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){

    string s,t;
    cin>>s>>t;

    int n=s.size(), m=t.size();

    int mx=1e9;

    vector<vector<int>> dp(n+2, vector<int>(26, mx ));

    rrep(i,n){
        rep(j,26){
            dp[i][j]= dp[i+1][j];
        }
        dp[i][s[i]-'a' ]= i; 
    }

    map<char,int> mpp;
    int flag=0;

    rep(i,n) mpp[ s[i] ]++;

    rep(i,m){
        if(mpp[t[i]]==0) {
            flag=1;

        }
    }

    if(flag ){

    cout<<-1<<endl;
    continue;
    }



    

    int pos=0, move=1;

    rep(i,m){
        if(pos>=n){
            pos=0;
            
            move++; 
        }
        
         if(pos!=0 && dp[pos][t[i]-'a']== mx ) {
            move++;
            pos=0;
        }    

        
            pos= dp[pos][t[i]-'a'] +1;
       

    }

    
    cout<<move<<endl;

}
return 0;
}
