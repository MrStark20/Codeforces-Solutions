#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int n;
cin>>n;
vector<pair<string, string>> v(n);
map<string,int> m;
vector<pair<string ,string>> ans;

    rep(i,n){
        cin>>v[i].ff>>v[i].ss;
        m[v[i].ff]++;
    }

    bool b[n];
    fill(b,b+n,false);
    int c=0;
    rep(i,n){
        if(m[v[i].ss]==0 && b[i]==false) {
            ans.pb(mp(v[i].ff, v[i].ss));
        }else if(b[i]==false){
             
        int y=m[v[i].ss];

        while(y!=0){
            string x=v[i].ss;
           
              for(int j=i+1;j<n;j++){
                if(x==v[j].ff){
                    if(m[v[j].ss]==0){
                        ans.pb(mp(v[i].ff, v[j].ss));
                        b[j]=true;
                        y=0;
                        break;
                    }else{
                        y=1;
                        b[j]=true;
                        x=v[j].ss;
                    }
                }
            }
        }
    }
    }
    cout<<ans.size()<<endl;
    rep(i, ans.size())
    cout<<ans[i].ff<<" "<<ans[i].ss<<endl;

return 0;
}
