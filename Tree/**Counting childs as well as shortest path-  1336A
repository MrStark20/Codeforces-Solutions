#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> child;
vector<int> vis;
void dfs(vector<vector<int>> &adj, int n){
    vis[n]=true;

    for(auto i: adj[n]){
        if(!vis[i]){
          
                    dfs(adj, i);
                      child[n] += (1+ child[i]);
        }
    }
   
}

int32_t main(){
FastHoviBaby



    
    int n, k;
    cin>>n>>k;

    vector<vector<int>> adj( 2e5+2, vector<int>());

    rep(i,n-1){
        int x,y;
        cin>>x>>y;

        adj[x].pb(y);
        adj[y].pb(x);
    }

    queue<int> q;
    vector<int> dis(n+1, INT_MAX);

    child.assign(n+1, 0);
    vis.assign(n+1, false);

    dis[1]=0;

    q.push(1);

    while(!q.empty()){
        int x=q.front();
        q.pop();

        for(auto i: adj[x]){
            if(dis[x]+1 < dis[i]){
                dis[i]= dis[x]+1;
                q.push(i);
            }
        }
    }

    int ans=0;

   

    dfs(adj, 1);

  

    vector<int> val;
    for(int i=2 ;i<=n; i++){
           val.pb(dis[i]- child[i]);
        
    }

    sort(all(val), greater<int>());



     for(int i=0;i<k ;i++){
         ans+= val[i];
     }   

    cout<<ans;

return 0;
}
