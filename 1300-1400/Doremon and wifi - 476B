#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
string s,t;
int d;
bool check(string p){
    int c=0;
    rep(i,p.size()){
        if(p[i]=='+') c+=1;
        else c-=1;
    }
  
    return c==d;
}

int32_t main(){
FastHoviBaby


cin>>s>>t;
d=0;
rep(i,s.size()){
    if(s[i]=='+')  d+=1;
    else d-=1;
} 
int comp=0; 
    rep(i,t.size()){
        if(t[i]=='?') comp++;
    } 
    if(comp==0){
        if(check(t)){
        cout<<fixed<<setprecision(12)<<(double)1<<endl;
        
        }else{
        cout<<fixed<<setprecision(12)<<(double)0<<endl; 
        }
        return 0;
    }

    int count=0;
    int n=t.size();
    rep(i,(1<<comp)){
        string tt=t;
        rep(j,comp){
            if(i&(1<<j)){
                 tt[tt.find('?')]='+';
            }else{
                tt[tt.find('?')]='-';
            }
        }
        if(check(tt)) count++;
    }

    double x= (1.0* count)/(1<<comp);
    cout<<fixed<<setprecision(12)<<x<<endl;
return 0;
}
