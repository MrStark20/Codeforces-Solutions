#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){
     if (a.ff != b.ff)  
     return a.ff > b.ff; 
      return a.ss < b.ss;
      }


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}



int32_t main(){
FastHoviBaby

// freopen("input.txt","r",stdin);
// freopen("output.txt","w",stdout);
 
int n;
cin>>n;
 int a[n];
 int b[n];
 
 int dif[n];
 
 rep(i,n) cin>>a[i];
 rep(i,n) cin>>b[i];

  rep(i,n){
 dif[i]= a[i]-b[i];
}
 
 sort(dif, dif+n);

 int ans=0, count=0, flag=0,l=0,r=0;
  
 rep(i,n){
 if (dif[i]>0){
  
  for(int j=0; j<i; j++){
  if(dif[i]+dif[j]>0){
 ans+=  (i-j);
  l= j;
 r=i+1;
 flag=1;

break;
}
} 
 if(flag) break;
   
}
}
  while(flag && r<n ){
   while(   l>=0 &&   dif[r] + dif[l]>0) {
   l--;
} 
  ans+= (r-l -1);
   
 r++;
 }
 


 cout<<ans;



return 0;
}
