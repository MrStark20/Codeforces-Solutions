It is used to find query of maximum between 2 indices or their sum.

If any doubts to visualize the tree, refer to Striver's video on Segment tree.

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
struct seg{

    vector<int> seg;
    vector<int> a;
    void makeset(int n, vector<int> &b){
        seg.assign(4*n + 2,0 );
        a.assign(n, 0);
        a.assign(b.begin(), b.end());
    } 
    void build(int ind, int l, int h){
        if(l==h){
            seg[ind]=a[l];
            return; 
        }
        int mid= (l+h)/2;
        build(2*ind +1, l, mid );
        build(2*ind +2, mid+1, h );

        seg[ind]+= (seg[ind*2 +1] + seg[ind*2 + 2]);

    }

    int query(int ind, int low, int high, int l, int h){
        if(low>=l && high<=h) {
            cout<<seg[ind]<<" "<<l<<" "<<h<<endl;
            return seg[ind];
        }
        cout<<low<<" "<<high<<endl;

        if(l>high || h<low ) return 0;  

        int mid=(low+ high)/2;

        int left= query( 2*ind +1, low, mid, l ,h);
        int right= query( 2*ind +2, mid+1, high, l, h);

        return left+right;  
    }



};

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;

    seg sg;

    vector<int> a(n);
    rep(i,n) cin>>a[i];
    sg.makeset(n,a);

    sg.build(0, 0, n-1);

   
    cout<<sg.query(0, 0, n-1 ,0, 3)<<endl;


}
return 0;
}
