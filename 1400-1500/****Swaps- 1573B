#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;
    vector<pair<int,int>> o(n);
    vector<pair<int,int>> e(n);
    unordered_map<int,int> m;
    rep(i,n) {
        cin>>o[i].ff;
        o[i].ss=i;
        m[o[i].ff]=i;
    }
    rep(i,n) {
        cin>>e[i].ff;
        e[i].ss=i;
    }
    if(o[0].ff<e[0].ff){ cout<<0<<endl; continue;}

    sort(all(e));
    int mi=INT_MAX;
    rrep(i,n){
        mi=min(mi, e[i].ss);
        e[i].ss=mi;
    }

    

    int m1=INT_MAX,j=0;
    for(int i=1;i<=2*n;i+=2){
        int x= m[i];
        x+= e[j].ss;
        j++;
        m1=min(m1, x);
    }
   
    cout<<m1<<endl;
}
return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////

Now, this problem was very tricky. First our approach was to store indices of odd one .

Then run a loop for all even default values. And take the min value we can get, but definitely it was O(n2) and we got tle. 
Then 
rep(i,n){
        int flag=0;
        for(int j=e[i].ff-1; j>=1;j-=2){
            m1= min( m1, m[j]+i-1);
 
            if(i>m1){ flag=1; break;}
        }
        if(flag) break;
    }
    
    So, the efficient approach was to use a min array (new/same) for even so, that those greater indexes which appear before desired smaller one can save us 
    from running another loop.
    
    Ex- 5
        7 5 9 1  3
        2 4 6 10 8
      ---------------
      even array after doing operation + sorting will look like this.
        2-0   4-1   6-2  8-3   10-3
        
        So, the benifit it gives us is that we can now compare all odd index to their corresponding modifed even index. 
        
        like for i=1, j=0.
        So, mi =   m[i]; ~~ 3
           pos of 2= 0.
           so, dist= 3+0=3.
           
           for, i=5, j=2.
           mi= m[5] ~~ 1
           pos of 6= 2
           So, dist= 2+1= 3
         
       In this way we can cal. it in O(n)  
