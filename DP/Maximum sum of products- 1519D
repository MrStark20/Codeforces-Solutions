#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<vector<int>> dp(5005, vector<int>(5005, -1));
vector<int> a(5005, 0), b(5005, 0);

int solve(int l, int r){
    if(l>r) return 0;

    if(l==r) return dp[l][r]= (a[l]*b[r]);
    if(dp[l][r]!=-1)
        return dp[l][r];

    return  dp[l][r]= (a[r]*b[l])+(b[r]*a[l])+ solve(l+1, r-1);

}


int32_t main(){
FastHoviBaby

int n;
cin>>n;
    rep(i,n) cin>>a[i];
    rep(i,n) cin>>b[i];

    int pre[n];
    pre[0]= a[0] *b[0];
    for(int i=1;i<n;i++){
        pre[i]=pre[i-1]+(a[i]*b[i]);
    }
    int mx=pre[n-1];

    rep(i,n){
       
       for(int j=i+1;j<n;j++){
             int ans=0;
            if(dp[i][j]==-1)
                solve(i, j);

            if(i-1>=0)
            ans+=pre[i-1];
            ans+= (pre[n-1]-pre[j]);
            ans+=dp[i][j];

            mx=max(mx, ans);
        }
    }

    cout<<mx;

return 0;
}
