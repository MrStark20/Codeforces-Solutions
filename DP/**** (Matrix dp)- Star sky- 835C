IN THIS WE WERE GIVEN PRESENCE OF SOME STARS ON MATRIX. LATER WE HAD TO TELL THAT WHICH STARS WILL FALL INTO GIVEN DIMENSION OF LOWER CORNER- (X1,Y1) AND UPPER 

CORNER (X2,Y2) forming a rectangle. FOR this we drew a matrix dp, which actually behaves some kind of prefix array to carry those stars, and then we subtract later,

which would be outside of given dimensions of rectangle.
  
  And we count seperately for all brightness.

--------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova

int n, q, c;
cin>>n>>q>>c;

int dp[11][101][101];
memset(dp, 0, sizeof dp);



    rep(i,n){
        int x,y,s;
        cin>>x>>y>>s;
        dp[s][x][y]++;
    }

    for(int p=0;p<=c; p++){
        for(int x=1; x<=100; x++){
            for(int y=1; y<=100; y++){
                dp[p][x][y] += (dp[p][x-1][y] + dp[p][x][y-1] - dp[p][x-1][y-1]); 
            }
        }
    }

    while(q--){
        int t, x1, y1, x2,y2;
        cin>>t>>x1>>y1>>x2>>y2;

        int stars= 0, ans=0;
        for(int i=0; i<=c; i++){
            stars= dp[i][x2][y2] - dp[i][x2][y1-1] - dp[i][x1-1][y2] + dp[i][x1-1][y1-1];

             int bri= (i+t)%( c+1); 

             ans+=(bri*stars);
        }

        cout<<ans<<endl;
       
    }

return 0;
}
