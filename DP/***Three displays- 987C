#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;
    vector<vector<int>> dp(n, vector<int>(3, 1e10) );

    vector<pair<int,int>> v(n);
    rep(i,n) cin>>v[i].ff;
    rep(i,n) cin>>v[i].ss;

    rep(i,n){
        dp[i][0]=v[i].ss;

        rep(j,i){
            if(v[i].ff>v[j].ff){
                dp[i][1]= min(dp[i][1], dp[j][0]+ v[i].ss);
            }
        }

        rep(j,i){
            if(v[i].ff> v[j].ff){
                dp[i][2]= min(dp[i][2], dp[j][1]+ v[i].ss );
            }
        }
    }

    int ans=1e18+6;
    rep(i,n) ans= min(ans, dp[i][2]);

    if(ans==1e10) cout<<-1;
    else cout<<ans;


return 0;
}

/////////////////////////////////////////////////////////////////////////////

      2  4  5  4 10
     40 30 20 10 40
    ------------------ 
0.   40 30 20 10 40
1.   e  70 50 50 50
2.   e  e  90  e 90
---------------------------------
ans- 90


So, here we have to give 3 ind v[i].ff<v[j].ff<v[k].ff and with their cost minimum.
We make a dp vector. 1st dp[i][0] is their actual cost.

And for dp[i][1], we check all the smaller indices than i. Then we check that their v[j].ff is < than v[i].ff, if so we take their count via min.

And for dp[i][2], we only check for dp[i][1], that ensures that we already have 2 indices found and we are just looking for only 3rd suitable index. 
