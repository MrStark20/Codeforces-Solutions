#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,u,r,d,l;
    cin>>n>>u>>r>>d>>l;

    vector<pair<int, char>> v(4);
    map<char,int> m;
    m['u']=u; m['r']=r; m['l']=l; m['d']=d;


     char g[n][n];

     string ar[19]= { "urdl", "urld", "udrl", "ulrd", "udlr", "rudl", "ruld", "rdul", "rlud", "rdlu", "lrud", "lrud", "ldru", "lurd", "ldur"
      "drul", "drlu", "durl", "dlru", "dulr" };
        
     int flag=0;

      rep(k, 19){
          flag=0;  
      m['u']=u; m['r']=r; m['l']=l; m['d']=d;   
     rep(i,4){
         if(ar[k][i]=='u'){

             for(int j= 1; j<n-1 && m['u']>0;j++){
                 g[0][j]='b';
                 m['u']--;
             }

             if(m['u']==1){
                 if(m['r']>=1){ m['u']--; g[0][n-1]='b';  m['r']--; }
                 else if( m['l']>=1) { m['u']--; g[0][0]='b';  m['l']--; }

                 else {flag=1; break;}
             }
             if(m['u']==2){
                  if(m['r']>=1 && m['l']>=1){ m['u']--; g[0][n-1]='b';  m['r']--;  m['u']--; g[0][0]='b';  m['l']--; }

                 else {flag=1; break;}
             }

         }

         else if(ar[k][i]=='d'){

               for(int j= 1; j<n-1 && m['d']>0;j++){
                 g[n-1][j]='b';
                 m['d']--;
             }

             if(m['d']==1){
                 if(m['r']>=1){ m['d']--; g[n-1][n-1]='b';  m['r']--; }
                 else if( m['l']>=1) { m['d']--; g[n-1][0]='b';  m['l']--; }

                 else {flag=1; break;}
             }
             if(m['d']==2){
                  if(m['r']>=1 && m['l']>=1){ m['d']--; g[n-1][n-1]='b';  m['r']--;  m['d']--; g[n-1][0]='b';  m['l']--; }

                 else {flag=1; break;}
             }
         }

         else if(ar[k][i]=='l'){

               for(int j= 1; j<n-1 && m['l']>0;j++){
                 g[j][0]='b';
                 m['l']--;
             }

             if(m['l']==1){
                 if(m['u']>=1){ m['l']--; g[0][0]='b';  m['u']--; }
                 else if( m['d']>=1) { m['l']--; g[0][n-1]='b';  m['d']--; }

                 else {flag=1; break;}
             }
             if(m['l']==2){
                  if(m['d']>=1 && m['u']>=1){ m['l']--; g[0][n-1]='b';  m['d']--;  m['l']--; g[0][0]='b';  m['u']--; }

                 else {flag=1; break;}
             }
         }
            else if(ar[k][i]=='r'){
                for(int j= 1; j<n-1 && m['r']>0;j++){
                 g[j][n-1]='b';
                 m['r']--;
             }

             if(m['r']==1){
                 if(m['u']>=1){ m['r']--; g[0][n-1]='b';  m['u']--; }
                 else if( m['d']>=1) { m['r']--; g[n-1][n-1]='b';  m['d']--; }

                 else {flag=1; break;}
             }
             if(m['r']==2){
                  if(m['d']>=1 && m['u']>=1){ m['r']--; g[n-1][n-1]='b';  m['d']--;  m['r']--; g[0][n-1]='b';  m['u']--; }

                 else {flag=1; break;}
             }
            }

            if(flag) break;

     }  
        
        if(!flag) {  break;}
      }

     if(flag) {cout<<"NO"<<endl; continue;}

     cout<<"YES"<<endl;
}
return 0;
}
