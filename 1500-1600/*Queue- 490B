#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;

map<int,int> m1;
map<int,int> m2;
map<int,int> m3;
int l=0,r=0;
vector<pair<int,int>> v(n+1);
    for(int i=1;i<=n;i++){
        cin>>v[i].ff>>v[i].ss;
        m2[v[i].ff]++; m3[v[i].ss]++;
        m1[v[i].ff]=v[i].ss;
    }

    for(auto i: m3) { if(i.ss==1) r=i.ff; }
    for(auto i: m2) { if(i.ss==1 && m3[i.ff]==0) l=i.ff; }
     

     vector<int> ans;
     ans.pb(l);
     int sec= m1[0];
     ans.pb(sec);

     int k=n-2;
     int p=m1[l], flag=0 ;
     while(k--){
         if(flag%2==0){
         if(p==0) break;     
         ans.pb(p);
         p=m1[p];
           
         }
         else{
             sec= m1[sec];
             if(sec==0) break;
             ans.pb(sec);   
         }

         flag++;
     } 

     rep(i, ans.size() ) cout<<ans[i]<<" ";
    
return 0;
}
