Just brute force, nothing dp in here

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
set<int> s;
vector<vector<int>> dp;
// int solve(int n, int sum, vector<ll>& a){

//     if(n==0)
//     return dp[n][sum]=0;

//     if(dp[n][sum]!=-1) return dp[n][sum];
   
   
//    dp[n][sum]= solve(n-1, sum, a); 

//     sum+=a[n];
//     s.insert(sum);

//     if(dp[n][sum]!=-1) return dp[n][sum];
//     dp[n][sum]=solve(n-1, sum, a);

//     return dp[n][sum];
// }

int32_t main(){
FastHoviBaby

ll n;
cin>>n;

 vector<ll> a(n+1,0);
 rep(i,n){
    cin>>a[i+1];
  

    if(i==0){
          s.insert(a[i+1]);
          continue;
    } 

    vector<ll> now;
    for(auto k: s){
        now.pb(k+ a[i+1]);
    }
    s.insert(a[i+1]);

    rep(k,now.size())
        s.insert(now[k]);
 }


    cout<<s.size()<<endl;
    for(auto i: s) cout<<i<<" ";

return 0;
}
