#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
const int N= 2*(1e5+ 10);
vector<int> adj[N];
bool vis[N]={false};
int dist[N]={0};
queue<int> q;

void bfs(int n){

    vis[n]=true;
    q.push(n);

    while(!q.empty()){
        int s= q.front();
        q.pop();
        for(auto i: adj[s]){
            if(!vis[i]){
                dist[i]=dist[s]+1;
                vis[i]=true;
                q.push(i);
            }
        }
    }

} 


int32_t main(){
FastHoviBaby

int n,m;
cin>>n>>m;
    if(n>=m) {cout<<n-m; return 0;}

    for(int i=1;i<= (m*2+1);i++){
        adj[i].pb(i-1);
        adj[i].pb(i*2);
    }
    bfs(n);

    cout<<dist[m];

return 0;
}

//////////////////////////////////////////////////////////////////
So, in this question there is a big web of connections and every no is connected to each other in some way.
So, we make a graph... 
    4
  /    \
 3      8
 / \
 2  6
 /\
 1 (also connected to 4.  Can't draw) 
 
 So, we basically do a BFS from the index given to all possible no, and where ever we find the required no. We store that no. and later print it 
 
