#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
 
int32_t main(){
FastHoviBaby
 
int n;
cin>>n; 
const int h= 302;
double dp[h][h][h];
 
int c1=0, c2=0, c3=0, c0=0;
 
    rep(i,n){
        int x;
        cin>>x;
        if(x==3) c3++;
        else if(x==2) c2++;
        else if(x==1) c1++;
 
    }
 
    for(int C3=0 ;C3<=n; C3++){
        for(int C2=0; C2<=n; C2++){
            for(int C1=0; C1<=n; C1++){
                 double C0= n- (C1+ C2 + C3);
 
                 if(C0==n){
                     dp[C1][C2][C3]= 0;
                     continue;
                 }  
 
                 double EB=0 , EC=0, ED=0, EA=0;  
 
                 double pb= (double)C3/n;
                  double pc= (double)C2/n;
                   double pd= (double)C1/n;
                 if(C3>0){
                     EB= dp[C1][C2+1][C3-1];
                 }
                 if(C2>0){
                    EC= dp[C1+1][C2-1][C3];   
                 }
                 if(C1>0){
                    ED= dp[C1-1][C2][C3];
                 }
 
                    EA= (1+ (EB* (pb) + EC*(pc) + ED * (pd) )) /(1- ( (1.0 * C0)/n));
 
                    dp[C1][C2][C3]=EA;
 
            }
        }
    }
 
    cout<< fixed<<setprecision(9)<< dp[c1][c2][c3];
 
return 0;
}

4 plates- 0 sushi, 1 sushi, 2sushi, 3 sushi

Now, if we eat from plate 3, p3-1, p2+1.
Similarly for other cases.

From these information, we derive a formula for plate 0, EA=     EA= (1+ (EB* (pb) + EC*(pc) + ED * (pd) )) /(1- ( (1.0 * C0)/n)); 

As mentioned above. For more details can refer to this YT video- https://www.youtube.com/watch?v=apeONhTuYUU&t=4121s
