#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
struct dsu{
    vector<int> parent, rank;
 
    void makeset(int n){
        parent.assign(n+1,0);
        rank.assign(n+1,1);
        for(int i=1;i<=n;i++) parent[i]=i;
    }
 
    int find(int x){
        while(parent[x]!=x)
            x=parent[x];
 
            return x;
    }
 
     void unite(int u, int v){
        u=find(u);
        v=find(v);
 
        if(u!=v){
 
            if(rank[u]<rank[v]){
                parent[u]=v;
                rank[v]+=rank[u];
            }else{
                 parent[v]=u;
                rank[u]+=rank[v];
            }
            
        }
       
    }
 
};

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    dsu d;
    d.makeset(27);

    string a,b;
    cin>>a>>b;

    int flag=0;
    rep(i,n){
        if(a[i]>b[i]) { flag=1; break;}
    }
    if(flag) { cout<<-1<<endl; continue;}

    int mx=INT_MIN;
    rep(i,n){
        
        int j=(a[i]-'a')+1;
        int k=(b[i]-'a')+1;

       d.unite(j,k);
    }
    map<int, set<char>> m;

    for(int i=1;i<=n;i++){
        int x= d.find(a[i-1]-'a'+1); 
        m[x].insert(b[i-1]);
    }
      for(int i=1;i<=n;i++){
        int x= d.find(b[i-1]-'a'+1); 
        m[x].insert(a[i-1]);
    }

    int ans=0;
    for(auto i: m){
        ans+= (i.ss.size()-1);
    }
    cout<<ans<<endl;
}
return 0;
}
////////////////////////////////////////////////////////////

Here, we were given two string A and B, we have to make A equal to B.

24                                     
cdgdjfljllkkjkdbaaabkbel
clhejjlkllkkklikabhcldhl
1
-----------------
3
aab         - bbb - bcc
bcc           bcc   bcc 

Now, we have been allowed to select any subsequence if all ai from selected subsequnce are equal in A and change all of them to y. (Y>X)

So, we united all of ai and bi, those ai's who were indirectly related to other indices were all bundled up together. Then we just had check for no. of pairs needed
to be changed.
