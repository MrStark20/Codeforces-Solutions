#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> fac(100);
vector<int> p2(20);
set<int> s;
vector<int> a;
 
int32_t main(){
FastHoviBaby
    fac[1]=1; s.insert(1);
    
    for(int i=2; ;i++){
        fac[i]= i*fac[i-1]; //cout<<fac[i]<<endl;
        
        if(fac[i]>1e12) break;
         s.insert(fac[i]);
    }
  
 
    for(auto i: s){
        a.pb(i);
    }
 
 
int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;
 
    int m=a.size(), mx=1e18-1;
  
    
 
 
    int mi=1e18;
    rep(i, (1<<m)){
 
            int x=n, move=0;
            rep(j, m){
                if( (i & (1 <<j))) {
                    x-=a[j];
                    move++;
                }
            }    
           
 
            if(x<0) continue;
            if(x>=0){
              int  prev=x;
            move+= __builtin_popcountll(x);   
                x=0;
            
            }
            if(move>0 && x==0)
            mi=min(mi, move );
    
                   
    
    
    }
    cout<<mi<<endl;
}
return 0;
}
