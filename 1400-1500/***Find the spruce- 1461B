#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,m;
    cin>>n>>m;

    char a[n][m];

    rep(i,n){
        rep(j,m){
            cin>>a[i][j];
        }
    }
    int ans=0;

    vector<pair<int,int>> v;
        int px=0, py=0; 

    int j=0;
    int col[n][m];
    rep(i,n){
        rep(j,m){

        if(a[i][j]=='*'){
          int l=1,r=1;      
        for(int k=j-1; k>=0;k-- ){
            if(a[i][k]=='*') l++;
            else break;
        }
        for(int k=j+1; k<m; k++){
            if(a[i][k]=='*') r++;
            else break;
        }

        col[i][j]=min(l,r);

        }
        else
        col[i][j]=0;
        }
    }

    int row[n][m];
     j=0;
    rep(i,m){
        rep(j,n){
        if(a[j][i]=='*'){
            row[j][i]=1+ ((j>0)? row[j-1][i] : 0);
        }else
        row[j][i]=0;
    } 
 }  

    rep(i,n){
        rep(j,m){
            if(i==0){
            ans+= min(row[i][j], col[i][j]);
            }
            else{
                if(min(row[i][j], col[i][j]) > min(row[i-1][j], col[i-1][j])+1){

                        int x= min(row[i-1][j], col[i-1][j])+1;
                        ans+= x;    

                    row[i][j]= min(row[i-1][j], col[i-1][j])+1;
                    col[i][j]=min(row[i-1][j], col[i-1][j])+1;
                }
                
                
                else{
                    ans+= min(row[i][j], col[i][j]);
            }
        }
       } 
    }

    cout<<ans<<endl;
}
return 0;
}
