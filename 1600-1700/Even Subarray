#include <bits/stdc++.h>
using namespace std;
#define int long long
// #define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){

    int n;
    cin>>n;

    vector<int> a(n);

    rep(i,n) cin>>a[i];

    vector<int> f;
    f.pb(0);
    int cnt=0;
    for(int i= 1; i<sqrt(2*n   +1) ; i++){

        f.pb(i*i);
    }

    

    vector<int> pre(n, 0);
    
    rep(i,n){
        pre[i] = (i>0 ? pre[i-1]^ a[i] : a[i] ); 
    }



    vector<int> fre((2*n +1), 0);

    int ans=0;
    fre[0]=1;

    int total = (n*(n+1))/2;

        rep(i,n){

        for(auto j: f){
            int tmp = pre[i] ^ j;

            if(tmp< 2*n+1)

            total-=fre[tmp];
        }

        if(pre[i] < 2*n +1)
        fre[pre[i]]++;

      

    }

    cout<<total<<"\n";

}
return 0;
}


In this problem, we used a standard way of calculating XOR of all subarray using a target number, here the target number is those number that have odd no of divisors.

Maximum XOR we can get from array is (2*n) from any number

and after that there lies the standard way of calculating XOR
