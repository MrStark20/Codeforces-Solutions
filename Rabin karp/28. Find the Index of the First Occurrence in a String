#define ll long long
#define pi (3.141592653589)
#define mod1 1000000007
#define mod2 1000000009

#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
class Solution {
public:
    
    
    int strStr(string haystack, string needle) {
        
       ll n= needle.size();
        
       ll p=31;
        
        vector<ll> lol1(n,0), lol2(n,0);
       
        vector<ll> pw1(n, 1), pw2(n,1);
        for(int i=1; i<n; i++) {
            pw1[i] = (pw1[i-1] * p)%mod1;
            pw2[i] = (pw2[i-1] * p)%mod2;
        }
        
        vector<ll> h1(n,0), h2(n,0);
        rep(i,n){
            h1[i] = ((i>0 ? h1[i-1]: 0 )+ (pw1[i] * (needle[i]-'a'+1) )%mod1)%mod1;
            h2[i] = ((i>0 ? h2[i-1] : 0) +(pw2[i] * (needle[i]-'a'+1) )%mod2)%mod2;
            
            if(h1[i]<0) h1[i]+=mod1;
            if(h2[i]<0 ) h2[i]+=mod2;
            
        }
         
       
        n=haystack.size();
        ll m=needle.size();
        vector<ll> hash1(n, 0), hash2(n,0);
        
        vector<ll> inv1(n,1), inv2(n,1);
        
        ll i_1 = modp(p, mod1-2, mod1);
        ll i_2 = modp(p, mod2-2, mod2); 
        
        for(int i=1; i<n; i++){
            inv1[i]= (inv1[i-1]* i_1 )%mod1;
            if(inv1[i]<0) inv1[i] +=mod1;
            
            inv2[i] = (inv2[i-1] * i_2 )%mod2;
            if(inv2[i]<0) inv2[i] +=mod2;
        }
       
        rep(i,n){
            hash1[i] = ((i>0 ? hash1[i-1] : 0) + ( modp(p, i, mod1) * ((haystack[i] - 'a') +1) )%mod1 )%mod1;
            if(hash1[i]<0) hash1[i]+=mod1;
            
            hash2[i] = ((i>0 ? hash2[i-1] : 0) + ( modp(p, i, mod2) * ((haystack[i] - 'a') +1))%mod2  )%mod2;
            if(hash2[i]<0) hash2[i]+=mod2;
            
           
        }
        
        for(int i=0 ;i+m-1<n; i++ ){
             ll x1= hash1[i+m-1] - (i>0 ?   hash1[i-1] : 0);
                if(x1<0) x1+=mod1;
                
                x1= (x1* inv1[i])%mod1;
                
                if(x1<0) x1+=mod1;
                
                
                
                
                ll x2= hash2[i+m-1] - (i>0 ? hash2[i-1] : 0);
                if(x2<0) x2+=mod2;
                
                x2= (x2* inv2[i])%mod2;
                if(x2<0) x2+=mod2;
                
                
                if(x1==h1[m-1] && x2==h2[m-1]) return i;
        }
        
        return -1;
        
        
        
        
        
        
    }
};
