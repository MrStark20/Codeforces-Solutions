#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,m,k;
cin>>n>>m>>k;
    int a[n+1];
    const int  N= 1e5+5;

    rep(i,n) cin>>a[i+1];

    int f[m+1]={0};

    vector<pair<int,int>> v(N);
    int d[N];

    for(int i=1;i<=m;i++){
        cin>>v[i].ff>>v[i].ss;
        cin>>d[i];
    }

    int que[N]={0};
    while(k--){
        int x,y;
        cin>>x>>y;
        
        que[x]++;
        que[y+1]--;
    }

  

    for(int i=1;i<=m;i++){
        que[i]= que[i]+que[i-1];
    }

    for(int i=1;i<=m;i++){
        d[i]=que[i] * d[i];
    }

  

    vector<int> again(N,0);
    for(int i=1;i<=m;i++){

        again[v[i].ff]+= d[i];

        again[v[i].ss+1]-= d[i];
    }

    for(int i=1;i<=n;i++){
        again[i]= again[i]+again[i-1];
    }

    for(int i=1;i <=n; i++){
        cout<<a[i]+again[i]<<" ";
    }

  

return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////

To do this query in less than O(n2). There is a concept of range query- Array differnce.

So, In this we add the frequency that we want to increase on left      a[left]+= freq            and on right we do           a[right+1]-= freq;

Here freq can be anything, here we had to use this operation twice, first time to determine the occurence of a particular query so, we incremented +1.

2nd time we had a precise value that we wanted to increment.

So, after doing this we add i-1 to i, a[i]= a[i]+a[i-1].

After this we get actual frequency, how many times a query has happend. And then we can add that with original array to get our answer.   
