 1 2 3 4 5
 target=7.
 tell no of subsets that can give sum of 7.
 3- 5 2, 4 3, 4 2 1
 
 We don't do much differnt, we apply standard knapsack and get the count of those which are true. 

int findWays(vector<int> &num, int tar)
{
  
  	vector<vector<int>> dp(105, vector<int>(1005,0));  
    int n=num.size();
    for(int i=0; i<=n;i++){
        for(int j=0; j<=tar; j++){
             if(j==0) {dp[i][j]=1; continue;}
            if(i==0 ) {dp[i][j]=0; continue;}
           	
            if(num[i-1]<=j)
                dp[i][j]= dp[i-1][j-num[i-1]]+ dp[i-1][j];
            
            else 
                dp[i][j]=dp[i-1][j];
        }
    }
	return dp[n][tar];    
}


//////////////////Recursion

#include <bits/stdc++.h> 
int mod= 1e9+ 7;
vector<vector<int>> dp;
int now=0;
int recur(int i, int w, vector<int> &a, int oppo){
    
    
    if(i<0){
        if(w==0 && oppo==0) return 1;
        return 0;
    }
    
    
    if(dp[i][w]!=-1) return dp[i][w]%mod;
    int ans=0;
    if(w-a[i]>=0)
        ans= (ans+ recur(i-1, w-a[i], a, oppo) + recur(i-1,w,a, oppo-a[i]))%mod;
    else 
        ans= (ans+ recur(i-1, w,a, oppo-a[i]))%mod;
   
       
    
    
    return  dp[i][w]=ans%mod;
    
}
int countPartitions(int n, int d, vector<int> &arr) {
       
    int s=0;
    for(int i=0;i<n;i++)s+=arr[i];
    
    if((s+d)%2!=0) return 0;
    
    int x= min((s+d)/2, s-((s+d)/2));
    int z= max((s+d)/2, s-((s+d)/2));
    
    dp.assign(n+1, vector<int>(s+1, -1));
    now=0;
    long long y= recur(n-1,x,arr,z);
    
    return y;
}

