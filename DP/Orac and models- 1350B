#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second > b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    vector<int> v(n+1);
    map<int,int> m;
    for(int i=1;i<=n;i++) {
        int x;
        cin>>x;
        v[i]=x;
    }

    int mx= INT_MIN;


    
    vector<int> a(n+1, 1);

    for(int i=1;i<=n;i++ ){
        
        for(int j=i*2; j<=n;j+=i){
            if(j%i==0 && v[j]>v[i]){
                a[j]= max(a[j], a[i]+1);
            }
        }
      
} 
  rep(i,n) if(a[i+1]>mx) mx= a[i+1];

  cout<<mx<<endl;

}
return 0;
}
////////////////////////////
In this we take the classic DP approach, for every i, we check all its divisors using another loop j, and if the current count is greater than what we can increament using a[j] 
we keep the a[i] otherwise change.  
