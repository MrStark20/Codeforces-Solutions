#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<vector<int>> dp;

int recur(string a, string b, int i, int j){

    if(i<=0 && j<=0) return 0;  

    if((i<=0 && j>0 )|| (i>0 && j<=0)) return 0;

    if(dp[i][j]!=-1) return dp[i][j];

    if(a[i-1]==b[j-1])
        return dp[i][j]= 1+ recur(a, b,i-1, j-1);

    else return dp[i][j]= max(recur(a,b, i-1, j),  recur(a,b, i, j-1));   

    return dp[i][j]; 
}

int32_t main(){
FastHoviBaby

string t,s;
cin>>s>>t;

dp.assign( s.size()+1, vector<int>(t.size()+1, -1));

    
    int n=s.size(),m =t.size();
    

    for(int i=0; i<=n; i++){
        for(int j=0; j<=m; j++){

            if(i==0 || j==0){
                dp[i][j]=0; continue;
            }

            if(s[i-1]== t[j-1])
                dp[i][j]= 1+ dp[i-1][j-1];

            else
            dp[i][j]= max(dp[i-1][j], dp[i][j-1]);    
        }
    }

       

           string ans="";

           while(true){
               if(n>0 && m>0 && s[n-1]== t[m-1]){
               ans+= s[n-1]; n--, m--;
               }
               else{
                   if(dp[n-1][m]>= dp[n][m-1])
                    n--;

                   else
                    m--;
               }

               if(!(n>0 && m>0)) break;
           }

        reverse(all(ans));   
        cout<<ans<<endl;

return 0;
}
