#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int mx=INT_MIN;

string s, t;


bool css(string l){

       
    int j=t.size()-1;

    int mx2=INT_MIN;
    int flag=0, prev=0, dif=0;

    rrep(i, l.size()){
        if(l[i]==t[j]) {
            if(!flag) prev=i, flag=1;
            else{
                dif= prev-i;
                prev=i;
            }
            mx2=max(mx2, dif);
            j--; 

        }

    }
    
    if(j==-1) {
        mx=max(mx, mx2);
        return true;
    }

    return false;
}


int32_t main(){
FastHoviBaby

int n,k;
cin>>n>>k;


cin>>s>>t;

 int l=-1, r=n+1;
    
   vector<int> front(k,0);
   vector<int> back(k,0);

    int j=t.size()-1;

    int mx2=INT_MIN;
    int flag=0, prev=0, dif=0;

    rrep(i, s.size()){
        if(s[i]==t[j]) {
           back[j]=i;
           
            j--; 

        }
        if(j==-1) break;

    }

    j=0;

    rep(i, s.size()){
         if(s[i]==t[j]) {
            
            front[j]=i;;
           
            j++; 
            if(j==k) break;

        }
    }



    rep(i,k-1){

        mx=max(mx,  (back[i+1]- front[i]));
    }

    rrep(i, k-1){

    }


    cout<<max(mx,mx2)<<endl;

return 0;
}
