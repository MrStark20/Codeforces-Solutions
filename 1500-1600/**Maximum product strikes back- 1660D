#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    int a[n+1];
    int pro=1,no=0, nt=0, zc=0;
    vector<int> z; 

    

    rep(i,n){
        cin>>a[i];
        if(a[i]==0) {
            zc++; z.pb(i);
    }
    } 
    a[n]=0;
    int pre[n];
    


    int mx=0, l=0, r=0, flag=0, prev=0, ansl=0, ansr=0;
    
    
    rep(i,n+1){

        if(a[i]==0){ 
            r=i-1;


             vector<int>nw;

             for(int i=prev; i<=r;i++){
                 nw.pb(a[i]);
                }

            int m=nw.size(), negt=0;
            rep(j,m){
                if(nw[j]<0) {
                negt++; 
            }
                
                pro=((abs(nw[j])==2)? pro+1: pro);
         } 


        if((nw.size()==1 && nw[0]<0) || nw.size()==0){
            pro=1;
            if(mx<pro){ 
                 mx=pro;
                ansl=0; ansr=n;    
            }
        }    
            
       else if(negt%2==1 ){ 
            pro=1;
             int sl=1, li=0;
           rep(j,nw.size()){
              if(nw[j]<0) {
                  li=j+1; 
                  if(abs(nw[j])==2) sl++;
              break;
              }
              else if(abs(nw[j])==2) sl++;
          }

          int sr=1, ri=0;
          rrep(j, nw.size()){
              if(nw[j]<0) { 
                  ri=m-j; 
                  if(abs(nw[j])==2) sr++;
              break;
                   }
               else if(abs(nw[j])==2) sr++;
          }

       

            if(sr>=sl){
              for(int k= prev+li;k<=r;k++) if(abs(a[k])==2) pro++; 
               if(pro>mx){
                mx=pro;
                ansl=prev+li; ansr=n-r-1;
            }

          }
          else if(sl>sr){
              for(int k=prev; k<=r-ri;k++) if(abs(a[k])==2) pro++;

               if(pro>mx){
                mx=pro;
                ansl=prev; ansr=ri+(n-r-1);
            }
          }
        }
        else{
            if(mx<pro){ 
                 mx=pro;
                ansl=prev; ansr=(n-r-1);    
            }

        }
            prev=i+1;
            pro=1;
        

     }

  }


    cout<<ansl<<" "<<ansr<<endl;

   
    
}
return 0;
}
