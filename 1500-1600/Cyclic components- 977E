#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
const int N= 2e5+10;
vector<int> adj[N];
vector<bool> vis (N, false );
struct dsu{
    vector<int> parent, rank;
 
    void makeset(int n){
        parent.assign(n+1, 0);
        rank.assign(n+1, 1);
        for(int i=1;i<=n;i++) parent[i]=i;
    }
    int find(int x){
        while(parent[x]!=x)
            x=parent[x];
 
            return x;
    }
 
    void unite(int u, int v){
        u=find(u);
        v=find(v);
 
        if(u!=v){
 
            if(rank[u]<rank[v]){
                parent[u]=v;
                rank[v]+=rank[u];
            }else{
                 parent[v]=u;
                rank[u]+=rank[v];
            }
            
        }
    }
};
int flag=0,f1=0;
void dfs(int n, int prev){
    vis[n]=true;
        if(adj[n].size()!=2) f1=1;
        for(auto i: adj[n]){ 
            if(vis[i] && i!=prev){ 
               if(f1==0) flag=1;  
            }else if(vis[i] && i==prev) continue;
            else if(!vis[i]){
                prev=n;
                dfs(i, n);
            }
        }
        
}

int32_t main(){
FastHoviBaby

int n,m;
cin>>n>>m;
    dsu d;
    d.makeset(n);

    map<int,int> m2;
    rep(i,m){
        int x,y;
        cin>>x>>y;
        d.unite(x,y);
        m2[x]++; m2[y]++;
        adj[x].pb(y);
        adj[y].pb(x);
    }

    map<int,vector<int>> mpp;
    for(int i=1;i<=n;i++){
        int x= d.find(i);
        mpp[x].pb(m2[i]);
    }
  
    flag=0;
    int count=0, ans=0; 
    for(auto i:mpp){
        int count=0;
        rep(j, i.ss.size()){
            if(i.ss[j]==2) count++;
        }
        if(count== i.ss.size()) ans++;
        cout<<endl;
    }

    cout<<ans;


return 0;
}
///////////////////////////////////////////////////////

The most important thing of cyclic component is that every vertex must be connected to only two other vertices.
