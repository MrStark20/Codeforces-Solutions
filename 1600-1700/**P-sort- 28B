#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
struct dsu{
    vector<int> parent, rank;
 
    void makeset(int n){
        parent.assign(n+1,0);
        rank.assign(n+1,1);
        for(int i=1;i<=n;i++) parent[i]=i;
    }
 
    int find(int x){
        while(parent[x]!=x)
            x=parent[x];
 
            return x;
    }
 
     void unite(int u, int v){
        u=find(u);
        v=find(v);
 
        if(u!=v){
 
            if(rank[u]<rank[v]){
                parent[u]=v;
                rank[v]+=rank[u];
            }else{
                 parent[v]=u;
                rank[u]+=rank[v];
            }
            
        }
       
    }
 
};

int32_t main(){
FastHoviBaby

int n;
cin>>n;
 dsu d;
 d.makeset(n);

 int a[n+1];
 rep(i,n) cin>>a[i+1];
 
 rep(i,n){
     int x;
     cin>>x;
     if(i+1+x<=n ){ d.unite(i+1, i+1+x); }   
     if(i+1-x>=1) { d.unite(i+1, i+1-x); }
 }
  
  map<int,vector<int>>m;
  map<int,vector<int>>m2;
  for(int i=1;i<=n;i++){
      m[d.find(i)].pb(i);
      m2[d.find(i)].pb(a[i]);
  }

    int flag=0;
    for(auto i:m){
       map<int,int> m3;
       int x=i.ff;
       rep(j, m[x].size()){
           
            m3[m[x][j] ]++;
            m3[m2[x][j]]++;
       }
       for(auto j: m3){
           if(j.ss!=2){
                flag=1;
                break;
           }
       }
       if(flag) break;
       
      }

      if(flag) cout<<"NO";
      else cout<<"YES";


return 0;
}
