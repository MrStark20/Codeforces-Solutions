#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int_fast64_t npow(int_fast64_t a, int_fast64_t b) { 
if(b==0) return 1;   int_fast64_t res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int_fast64_t n;
    cin>>n;

     int_fast64_t a=0, t=n;   int x=0;
    while(t>1){
    //   int x= 31-__builtin_clz(t);
      
          if( (t & t-1)==0){
            t =(t>>1);
        }else{
            x=(log2(t));
            unsigned int count= (1ULL<<x);

             t= t-count;
        }
           a++;
    }
    
    if(a%2!=0) cout<<"Louise"<<endl;
     else cout<<"Richard"<<endl;
}
return 0;
}
//////////
 if last 2 bits are 0. Then guranteed that no will be divided by 2.
  (t>>1) =means  t=/2
  
  log2(t) gives the counts of total bits present.
