Same thing recursive approach

#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution{
    public:
    vector<vector<int>> dp;
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        dp.assign(n+1, vector<int> (m+1, -1));
        
        int mx=0;
        
        rep(i,n){
            rep(j,m){
                mx=max(mx, recur(i,j,S1,S2));
            }
        }
        return mx;
    }
    
    int recur(int i, int j, string &s, string &t){
        if(i==s.size() || j==t.size())
        return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(s[i]==t[j])
        dp[i][j]= 1+ recur(i+1, j+1, s, t) ;
        else
        dp[i][j]= 0;
        
        return dp[i][j];
        
    }
};



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
axxxy

here xx,xx
Abcadbc

here abc

So, we take lcs of the same string but we don't take same characters on same index.

	int LongestRepeatingSubsequence(string str){
		    string s="", now=str;
		    
		    int n=str.size(), k=now.size();
		    vector<vector<int>> dp(n+1, vector<int>(k+1,0) );
		        
		    for(int i=1;i<=n;i++){
		        for(int j=1;j<=k;j++){
		            
		            
		            if(i!=j && str[i-1]== now[j-1]){
		                dp[i][j]=1+dp[i-1][j-1];
		                //s+=str[i-1];
		            }
		            else
		            dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
		        }
		    }
		    
		    
		    return dp[n][k];
		}
