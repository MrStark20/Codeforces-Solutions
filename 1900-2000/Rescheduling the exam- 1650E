#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

vector<int> a;

bool check(int mi, int d){

    int n=a.size(); 

    for(int i=1; i<n;i++){
        if((a[i]-a[i-1]-1)<mi){ 
            return false;
        }
    }

    if((d- a.back())- 1 >= mi) return true;
     for(int i=1; i<n;i++){
        if( (a[i]-a[i-1]-1) > mi*2){    
          return true;
        }
    }

    return false;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){

    int n,d;
    cin>>n>>d;
    a.assign(n+1, 0);
    vector<int> b(n+1,0);

    for(int i=1;i<=n;i++){
        cin>>a[i]; b[i]=a[i];
    }

    int mi=INT_MAX,index=0;

  

     for(int i=1; i<=n;i++){
        if( (a[i]-a[i-1]-1) <mi){
            mi=a[i]-a[i-1]-1;
            index=i;
        }
    }

    a.erase(a.begin()+index);
    int ans=0;
    int l= mi, r=d+1;


        while(r-l>1){
            int m=(l+r)/2;

                if(check(m, d))
                l=m;
                else
                r=m;
        }
        ans=l; 
       

        if(index-1!=0){
           a.assign(all(b));
            a.erase(a.begin()+ (index-1));
                l= mi, r=d+1;


            while(r-l>1){
            int m=(l+r)/2;

                if(check(m, d))
                l=m;
                else
                r=m;
            }

            ans=max(ans, l);  
        }
       


        cout<<ans<<endl;


}
return 0;
}
