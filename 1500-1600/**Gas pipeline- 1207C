#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
const int mx= 1e18; 
string s;
int a,b;
vector<vector<int>> dp;
// 0 - 0 height, 1- 1 height

int check(int n, int up ){
    if(n==s.size())
        return (up ? mx : b);

    if(dp[n][up]!= -1)
        return dp[n][up];

    int best= mx;
    if(s[n]=='1'){
        if(up==0) return mx;

            best= check(n+1, 1)+ b+b+ a ;
    }
    else{
        //stay high    
        best= check(n+1, 1)+ (up==1 ? b+b : b )+ (up==1 ? a : a+a);

        //stay low

        best= min( best,   check(n+1, 0 ) + (up==1 ? b+b : b ) + (up==1 ? a+a : a));
    } 
    
    return dp[n][up]=best;   
}


int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n>>a>>b;

    
    cin>>s;
    dp.assign(n+1, vector<int>(2,-1));

    int ans= check(0, 0);
    cout<<ans<<endl;
}
return 0;
}
