#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int a[3];
    cin>>a[0]>>a[1]>>a[2];
    int b,c,m;
    cin>>m;
   

    sort(a,a+3, greater<int>());
    int mx= a[0]+a[1]+a[2]-3;
    int mi= a[0]-a[1]-a[2]-1;

    if(m>=mi && m<=mx) cout<<"YES"<<endl;
    else
    cout<<"NO"<<endl;
}
return 0;
}

///////////////////////////////////////////////
What we do here is we take the maximum pairing and minimum pairing and if m falls between them then we will always get our answer, else No.
  Q. A-3 B-3 C-4
  -> For getting maximum, we write them like AAABBCCCC.
  AAA- gives 2 pairs, AAAA- 3 So, that's why A-1+B-1+C-1
  
  Now,  for minimum we write them apart as much as we can
    BCACACACBB
    we cannot do much with last B so it will end up being in pair.
    So, our min will be result of sorted, C-A-B-1.
    
    If our m is >= min and <=max, we have our answer.
