#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n;
string s;



bool check(string t, int mid,  vector<vector<int>> freq, vector<int> old){


    rep(i,26){
        if(old[i]>freq[mid][i]) return false;
    }
   
    return true;
}

int32_t main(){
FastHoviBaby


cin>>n;
cin>>s;
  int m;
  cin>>m; 

 vector<vector<int>> v(n, vector<int> (26,0));
   
   

    v[0][s[0]-'a']=1;
    for(int i=1;i<n;i++){
        v[i][s[i]-'a']+=1;
        rep(j,26){
            v[i][j]+=v[i-1][j];
        }
    }

   



    for(int i=0;i<m;i++){
        string t;
        cin>>t;

      
        vector<int> mpp(26,0);
        rep(k,t.size()) mpp[t[k]-'a']++;
        

        int l=-1,r=n-1;
        while(r-l>1){
            int mid=(l+r)/2, flag=0;
            rep(i,26){
            if(mpp[i]>v[mid][i]) {
                flag=1;
                break;
        }
            }

            if(!flag)
            r=mid;
            else l=mid;
        

    }  cout<<r+1<<endl;
   }
return 0;
}

//////////////////
Last approach we tried to pass entire vectot<vector<in>> v through the checkers fn. But that leads to multiple copy of v everytime we call it.

Perhaps just globally declare 'v' to use it like this.
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n;
string s;
int const N=1e6+17;
 vector<vector<int>> v(N, vector<int> (26,0));


bool check(int mid, vector<int> old){


    rep(i,26){
        if(old[i]>v[mid][i]) return false;
    }
   
    return true;
}

int32_t main(){
FastHoviBaby


cin>>n;
cin>>s;
  int m;
  cin>>m; 


   
   

    v[0][s[0]-'a']=1;
    for(int i=1;i<n;i++){
        v[i][s[i]-'a']+=1;
        rep(j,26){
            v[i][j]+=v[i-1][j];
        }
    }

   



    for(int i=0;i<m;i++){
        string t;
        cin>>t;

      
        vector<int> mpp(26,0);
        rep(k,t.size()) mpp[t[k]-'a']++;
        

        int l=0,r=n-1;
        while(r-l>1){
            int mid=(l+r)/2, flag=0;
            

            if(check( mid, mpp))
            r=mid;
            else l=mid;
        

    } if(check(l,mpp)) cout<<l+1<<endl;
        else cout<<r+1<<endl;
   }
return 0;
}

