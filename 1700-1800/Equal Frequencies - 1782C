#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}



int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;

    string s;
    cin>>s;

    vector<int> fac ;

    for(int i=1; i*i<=n; i++){
        if(n%i==0){
            if(n/i == i){
               if(n/i <=26 ) fac.pb(i);
            }else{
                if(n/i <=26 ) fac.pb(i);
                if(n/(n/i) <= 26) fac.pb(n/i);
            }
        }
    }




    map<char,int> m;
    rep(i,n) m[s[i]]++;

 

    vector<pair<int,char>> b;
    rep(i,26){
        char a='a'+i;
        b.pb({m[a], a});
    }

    sort(all(b), greater<pair<int,char>>());


    ll mi=n;
    string ans="";

    rep(i, fac.size()){
        int parts= n/fac[i];    

        map<char,int> m2;
        vector<char> lol;
        rep(j, parts){
            m2[b[j].ss]++;  
            lol.pb(b[j].ss);  
        }    

        int limit= fac[i];


        map<char,int> m1=m;
        ll cnt=0;
        string f="";

        rep(j,n){
            if(m2.find(s[j])!=m2.end()){
               
                 if(m1[s[j]] > limit){
                    rep(k, parts){
                        if(m1[lol[k]]<limit ){
                            m1[lol[k]]++;
                            f+=lol[k];
                            cnt++;
                            break;
                        }
                    }
                    m1[s[j]]--;
                 }else{
                    f+=s[j];
                 }
            }
            else{
                rep(k, parts){
                        if(m1[lol[k]]<limit ){
                            m1[lol[k]]++;
                            f+=lol[k];
                            cnt++;
                            break;
                        }
                    }
            }

        }
        if(cnt<mi){
            mi=cnt;
            ans=f;
        }
    }

    cout<<mi<<"\n";
    cout<<ans<<"\n";
}
return 0;
}
