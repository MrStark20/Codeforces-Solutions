#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int a[6][6];
vector<string> ans;
int check(string s){

    int sum=0;
    while(s.size()!=1){
        for(int i=0;i<s.size()-1;i+=2){

            sum+= ( a[s[i]-'0'][s[i+1]-'0'] + a[s[i+1]-'0'][s[i]-'0']);
        }
        s.erase(s.begin());
    }
    return sum;
}
 void possible(char set[], string s, int n, int k){
     if(k==0){
         ans.pb(s);
         return;
     }
     rep(i,n){
         string ss= s+set[i];
         possible(set, ss, n, k);
     }
 }

int32_t main(){
FastHoviBaby

for(int i=1;i<=5;i++){
    for(int j=1;j<=5;j++){
        cin>>a[i][j];
    }
}

    char p[]= { '1', '2','3','4','5'};
    rep(i, 120){
        next_permutation(p, p+5);

        string k="";
        for(int i=0;i<5;i++){
            k+=p[i];
        }
        ans.pb(k);
    }
        int mx= INT_MIN;
    rep(i,ans.size()){ 
        mx= max(mx, check(ans[i]));
    }

    cout<<mx;

return 0;
}
