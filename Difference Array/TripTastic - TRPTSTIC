#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


ll npow(ll a, ll b) { 
if(b==0) return 1;   ll res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


ll gcd(ll a , ll b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(ll n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


ll t=1;
cin>>t;
while(t--){
    
    ll n,m,k;
    cin>>n>>m>>k;

    vector<vector<ll>> grid(n+1, vector<ll>(m+1, 0));
    rep(i,n){
        rep(j,m){
            cin>>grid[i][j];
        }
    }
    vector<vector<ll>> dp(n+1, vector<ll>(m+1, 0));

    rep(i,n){
        rep(j,m){
            dp[i][j]+= grid[i][j];

            dp[i][j] += (i>0 ? dp[i-1][j]: 0) + (j>0 ? dp[i][j-1] : 0) - (i>0 && j>0 ? dp[i-1][j-1] : 0);
        }
    }

    ll l=-1, r=max(n,m)+1;
    ll ans=0;

    while(r-l>1){
        ll mid=(l+r)/2;

        ll flag=0;
        rep(i,n){
            rep(j,m){
                if(grid[i][j]==0) continue;
                ll sx = max((ll)0, i-mid )  ,sy= max((ll)0, j-mid);
                ll ex = min((ll)n-1, i+mid )  ,ey= min((ll)m-1, j+mid);

                ll now= dp[ex][ey] - (sx>0 ? dp[sx-1][ey] : 0 ) - (sy>0 ? dp[ex][sy-1] : 0) + (sx>0 && sy>0 ? dp[sx-1][sy-1]: 0);

            
                if(now>= k+1) { ans=1; flag=1; break;}  
            }
            if(flag) break;
        }
        if(flag) r=mid;
        else l=mid;
    }
    if(!ans) cout<<-1<<"\n";
    else
    cout<<r<<"\n";

}
return 0;
}
