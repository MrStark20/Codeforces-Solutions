#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;

    map<int,int> m1; 

    multiset<int> ms1;

    rep(i,n){
        int x;
        cin>>x;
        if(x==1) continue;
        m1[x]++;
        ms1.insert(x);
    }

    multiset<int> ms2;
    map<int,int> m2;

    rep(i,n){
        int x;
        cin>>x;
        if(x==1) continue;

        if(m1.find(x)!=m1.end()){
            if(m1[x]-1==0){
                m1.erase(x);
                
                
            }else m1[x]--;
            
            ms1.erase(ms1.equal_range(x).ff);
        }else{
            ms2.insert(x);
            m2[x]++;
        }
    }

    int ans=0;
    


    multiset<int> ms3=ms2;

    for(auto it=ms2.begin();it!=ms2.end(); it++) {
        string now=to_string(*it); 
        int f=now.size();
        if( m1.find(f)!=m1.end() &&  m1[f]>0 ){
            ans+=1;
            
           
            ms1.erase(ms1.equal_range(f).ff);
             if(m1[f]-1==0){
                m1.erase(f);
            }
            else m1[f]--;

             ms3.erase(ms3.equal_range(*it).ff);
             
        }
       
    }
    ms2=ms3;

       multiset<int> ms4=ms1;
      
    for(auto i:ms1){
        string now=to_string(i);
        if(m2.find(now.size())!=m2.end() &&  m2[now.size()]>0 ){
            ans+=1;
            int f=now.size();
            ms4.erase(ms4.equal_range(i).ff);
            ms2.erase(ms2.equal_range(f).ff);
             if(m2[f]-1==0){
                m2.erase(f);
            }
            else m2[f]--;
        }
       
    }
    ms1=ms4;

   map<int,int> c1,c2;

 
 

   for(auto i: ms1) {
    if(i>9) {
        ans++;
        string now= to_string(i);
        c1[now.size()]++;
    }
    else if(i>1){
        c1[i]++;
    }
   }

    for(auto i: ms2) {
    if(i>9) {
        ans++;
        string now= to_string(i);
        c2[now.size()]++;
    }
    else if(i>1){
        c2[i]++;
    }
   }

   for(auto it=c1.begin(); it!=c1.end(); it++){

        if(c2[it->ff]>0){
            int mi= min(c2[it->ff], it->ss);

            c2[it->ff]-=mi;
            it->ss-=mi;
        }


   }

   for(auto i: c1){ 
     ans+= (i.ss);
   }
   for(auto i: c2){
     ans+= (i.ss);
   }

   cout<<ans<<endl;





}
return 0;
}
