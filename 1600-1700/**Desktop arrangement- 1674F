#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,m, q;
cin>>n>>m>>q;

int count=0;
vector<vector<char>> g(n+1, vector<char>(m+1));

    for(int i=1;i<=n; i++){
        for(int j=1;j<=m; j++){
            cin>>g[i][j];
            if(g[i][j]=='*') count++;
        }
    }


        int move=0, empty=0;
        
       for(int i=1;i<=m ;i++){
             for(int j=1; j<=n ; j++){
                 move++;
                 if(g[j][i]=='.') empty++;

                 if(move>= count) break;
             }
              if(move>= count) break;
         }

         int rx= ((count%n== 0) ? n: count%n ), ry= ceil((1.0*(count))/n);
       
    

    while(q--){
        int x,y;
        cin>>x>>y;

        if(count==0){
            cout<<0<<endl;
            continue;
        }

        

         if(g[x][y]=='*') { 

            if(g[rx][ry]=='.') empty--;
             
             g[x][y] ='.';
             count--;  

              

              rx= ((count%n== 0) ? n: count%n ), ry= ceil((1.0*count)/n);

               if( (y==ry  && x<=rx) || y<ry){
                    empty++;
               }  
             }
         else {

             
                
             g[x][y]='*';
              count++;

             if( (y==ry  && x<=rx) || y<ry){
                   empty--; 
               }    

             rx= ((count%n== 0) ? n: count%n ), ry= ceil((1.0*count)/n);  
             if(g[rx][ry]=='.') empty++; 

              

               }
               cout<<empty<<endl;

        

        


    }


return 0;
}
