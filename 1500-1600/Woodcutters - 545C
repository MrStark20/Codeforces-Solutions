#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;

vector<vector<int>> dp(n+1, vector<int>(3,0));

vector<pair<int,int>> v(n+1);

for(int i=1;i<=n;i++)
cin>>v[i].ff>>v[i].ss;

if(n==1){
    cout<<1<<endl;
    return 0;
}

dp[1][0]=0;
dp[1][1]=1;
dp[1][2]= 0;


    for(int i=2;i<=n;i++){ 
        int x= max(dp[i-1][0], max(dp[i-1][1], dp[i-1][2])); 

        if(i!=n){
        dp[i][0]= x;

        if(dp[i-1][0] < dp[i-1][2] && dp[i-1][2]> dp[i-1][1]){
            if( v[i].ff- v[i-1].ff > v[i].ss+v[i-1].ss){
             dp[i][1]= dp[i-1][2]+1; 
            }else
            dp[i][1]=dp[i-1][2];
        }else
        dp[i][1]= ((v[i].ff - v[i].ss > v[i-1].ff) ? x+1 : x );

        dp[i][2] =  ((v[i].ff + v[i].ss < v[i+1].ff) ? x+1 : x );
        }
        else{
            dp[i][0]=x+1;
             dp[i][1]=x+1;
              dp[i][2]=x+1;
        }
        

    }


    int ans=  max(dp[n][0], max(dp[n][1], dp[n][2]));
    cout<<ans<<endl;

return 0;
}
