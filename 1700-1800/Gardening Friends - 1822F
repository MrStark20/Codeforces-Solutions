#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


ll npow(ll a, ll b) { 
if(b==0) return 1;   ll res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


ll gcd(ll a , ll b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(ll n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

vector<vector<int>> adj;
vector<int> depth;

vector<int> A,B;
void dfs(int n, int par, int dep, int lol){
if(lol==0)
depth[n]=dep;
else if(lol==1) 
A[n]=dep;
else
B[n]=dep;

    for(auto i: adj[n] ){
        if(i!=par){
            dfs(i,n, dep+1,lol);
        }
    }
}

int32_t main(){
Jhunjhar_Hova


ll t=1;
cin>>t;
while(t--){
    int n,k,c;
    cin>>n>>k>>c;
    
    adj.assign(n+1, vector<int>{});
    depth.assign(n+1, 0);
    A.assign(n+1, 0);
    B.assign(n+1, 0);

    rep(i,n-1){
        int u, v;
        cin>>u>>v;

        adj[u].pb(v);
        adj[v].pb(u);
    }

    dfs(1, -1, 0,0);

    pair<ll, ll> a={-1, -1}, b= {-1,-1};
    for(int i=1;i<=n; i++){
        if(depth[i]>a.ff){
            a.ff= depth[i];
            a.ss= i;
        }
    } 

    dfs(a.ss, -1, 0, 1);
    for(int i=1;i<=n; i++){
        if(A[i]>b.ff){
            b.ff= A[i];
            b.ss= i;
        }
    }
    dfs(b.ss, -1, 0, 2);

    ll mx=-1;

    for(int i=1;i<=n; i++){
        ll ans= max(A[i], B[i])*k - (depth[i]*c);

        mx= max(mx, ans);
    }

    cout<<mx<<"\n";

}
return 0;
}
