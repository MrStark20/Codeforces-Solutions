#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n, k;
    cin>>n>>k;

    char a[3]={'R', 'G', 'B'};

    vector<string> c;

    string s;
    cin>>s;

    int mi=INT_MAX;
   
    int l=0, r=k;
    map<int, map<char,int>> m;

    rep(i,k)
    m[i%3][s[i]]++;


          int po= k-  (m[0]['R']+m[1]['G']+m[2]['B']);
          int p2= k-  (m[0]['G']+m[1]['B']+m[2]['R']);
          int p3= k-  (m[0]['B']+m[1]['R']+m[2]['G']);

   
          mi=min(mi, min3(po, p2, p3));

    while(r<n){
        m[l%3][s[l]]--;
        m[r%3][s[r]]++;
 
            l++;
           po= k-  (m[l%3]['R']+m[(l+1)%3]['G']+m[(l+2)%3]['B']);
           p2= k-  (m[l%3]['G']+m[(l+1)%3]['B']+m[(l+2)%3]['R']);
           p3= k-  (m[l%3]['B']+m[(l+1)%3]['R']+m[(l+2)%3]['G']);

          mi=min(mi, min3(po, p2, p3));
          r++;
    }

    cout<< mi<<endl;
}
return 0;
}
