#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;

    int move=0, mi=1e18+10;

   vector<int> c(n);
    rep(i,n){
        cin>>c[i];
    }

    

    

    for(int i=0;i<n-1;i++){
        vector<int> ans(n,0);

        int m1=0, m2=0, move=0;
        if(ans[i]>= ans[i+1]){

            vector<int> k(n); 
            rep(i,n) k[i]=ans[i];

            for(int j=i;j-1>=0;j--){

                if(k[j-1] >= k[j]){
                int x= k[j-1], y= k[j];

                int dif= (k[j-1]  - k[j])/ c[j-1] +1;

                m1+= dif;
                k[j-1] = -(c[j-1]*dif);

            
                }
            }
           
            int x=0, y=0;
            for(int j=i; j<n-1; j++ ){

                if(ans[j]>= ans[j+1]){
                  x=ans[j+1], y=ans[j];

                  int dif= (y-x)/c[j+1] +1;

                  m2+= dif;
                  ans[j+1] = (dif * c[j+1]);   
                }                  
            }
           
                move+=m1;
                
           
                move+=m2;
                  
            for(int j=i;j>=0;j--){

              ans[j]=k[j];
            }  
            
         

        }
         mi=min(mi, move);

    }

    cout<<mi;

  

   


return 0;
}
