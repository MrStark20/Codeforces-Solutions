#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int t,x,y,dx,dy;
cin>>t>>x>>y>>dx>>dy;
string s;
cin>>s;
map<char, vector<int> > m;
    rep(i,t){
        m[s[i]].pb(i+1);
    }

    string dir="";
    if(x>dx){
        int xx= x-dx;
        rep(i,xx) dir+='W';
    }else if(x<dx){
        int xx= dx-x;
        rep(i,xx) dir+='E';
    }

    if(dy>y){
        int xx= dy-y;
        rep(i,xx) dir+='N';
    }else if(dy<y){
        int xx= y-dy;
        rep(i,xx) dir+='S';
    }

  

    int flag=0,mx=0;
    set<char> sets;
    map<char,int> m2;
    rep(i,dir.size())   {
        sets.insert(dir[i]);
        m2[dir[i]]++;
    }

    for(auto it= sets.begin();it!=sets.end();it++){  
        if(m2[*it]> m[*it].size()){
            flag=1;
            break;
        }else{
            int g= m2[*it];
            for(auto i : m){
                if(i.ff==*it){
                    rep(j, i.ss.size()){
                     if(j<g) 
                    mx=max(mx, i.ss[j]);
                    }
                }
            }
        }

    }
    if(flag){ cout<<-1<<endl;}
    else cout<<mx;
    

return 0;
}
