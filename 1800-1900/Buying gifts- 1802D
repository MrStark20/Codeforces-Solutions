#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


ll npow(ll a, ll b) { 
if(b==0) return 1;   ll res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


ll gcd(ll a , ll b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(ll n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

ll recur(vector<pair<ll,ll>> &a){

    multiset<ll> m;
    sort(all(a));
    rep(i, a.size()){
        m.insert(a[i].ss);
    } 

    ll mi = 1e18, n=a.size();

    set<ll> s;
    rep(i,n){
        m.erase(m.equal_range(a[i].ss).ff );

        if(i<n-1)
        mi= min(mi, abs(a[i].ff - *(--m.end())) );

        if(i==n-1 || (!s.empty() && *(--m.end())<=a[i].ff )  ){
            auto it= s.lower_bound(a[i].ff);
            if(it!=s.end()){
                mi= min(mi, abs(a[i].ff - *it) );
            }

        }
        s.insert(a[i].ss);
    }

    return mi;
}




int32_t main(){
Jhunjhar_Hova


ll t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;
    vector<pair<ll,ll>> a(n), b(n);
    rep(i,n) {
        cin>>a[i].ff>>a[i].ss;
        b[i].ff=a[i].ss;
        b[i].ss= a[i].ff;
    }


    ll best= 1e17;

    best= min({best, recur(a), recur(b) });

   

    cout<<best<<"\n";

}
return 0;
}
