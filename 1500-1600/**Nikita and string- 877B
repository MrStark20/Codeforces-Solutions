#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

string s;
cin>>s;

    int n=s.size();

    int pre[n];
    int pa[n];
    if(s[0]=='b') pre[0]=1;
    else pre[0]=0;

    if(s[0]=='a') pa[0]=1;
    else pa[0]=0;

    for(int i=1;i<n; i++){
        if(s[i]=='a') pa[i]=pa[i-1]+1;
        else
        pa[i]=pa[i-1];
    }

    for(int i=1;i<n; i++){
        if(s[i]=='b') pre[i]=pre[i-1]+1;
        else 
        pre[i]=pre[i-1];
    }

    int mx= n-pre[n-1];   
    mx= max(mx, n-pa[n-1]);

    rep(i,n){
        for(int j=i; j<n; j++){
            if(s[i]!= 'b' || s[j]!='b') continue;
           
            mx= max( mx, n-(((i==0)?0: pre[i-1])+ (pre[n-1]-pre[j])+ (j==0 ? 0 : (pa[j]-pa[i])   )));
        }
    }
    cout<<mx<<endl;
return 0;
}
