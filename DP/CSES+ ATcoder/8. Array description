Here we are given a array maybe partially filled maybe full. We have to fill it such way that no 2 adjacent |ai - ai+1| >1.  Have to keep all elements under m= 1 to 100. 

    2 0 0 3 0 5 , 0 symbolizes that this position is left empty. So, we run a dp for every position. 
    
    If position is occupied we check for dp[i-1][that pos] , if possible dp[i-1][pos-1] and also dp[i-1][pos+1].
    
    If unoccupied we do the same for every element from m=1 to 100.
    
    
    #include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,m;
cin>>n>>m;

int val[n];
rep(i,n) cin>>val[i];

    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));


//////////////////////////////////////////////-----------Initialization

    if(val[0]!=0){
        dp[0][val[0]]=1;
    }else{
        for(int i=1;i<=m;i++)
        dp[0][i]=1;
    }


    for(int i=1;i<n;i++){
        if(val[i]==0){

        for(int j=1;j<=m;j++){

            (dp[i][j]= (dp[i][j]+ dp[i-1][j])%mod) %= mod;

           if(j-1>=1)  {   
            (dp[i][j]= (dp[i][j]+ dp[i-1][j-1])%mod) %= mod;
             
           }
            if(j+1<=m){
             
            (dp[i][j]= (dp[i][j]+ dp[i-1][j+1])%mod) %= mod;

            }
            }

        }

        else{
           (dp[i][val[i]]= (dp[i][val[i]]+ dp[i-1][val[i]])%mod) %= mod;
           

         if(val[i]-1>=1)    
             (dp[i][val[i]]= (dp[i][val[i]]+ dp[i-1][val[i]-1])%mod) %= mod;
            

           if(val[i]+1<=m){
                (dp[i][val[i]]= (dp[i][val[i]]+ dp[i-1][val[i]+1])%mod) %= mod;
           }
        }
    }

    int ans=0;
    for(int i=1;i<=m;i++){
        (ans= (ans+dp[n-1][i])%mod) %=mod;
    }
    cout<<ans;

return 0;
}
