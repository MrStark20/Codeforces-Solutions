#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
bool check(string s){
    int x= count(all(s), 'a');
    int y=count(all(s), 'b');
    int z= count(all(s), 'c');

    
    if(x>y && x>z) return true;
    return false;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    string s;
    cin>>s; 
    int flag=0, l=0;  

    for(int i=2;i<=7;i++){
        for(int j=0; j+i<=s.size();j++){   
                string r= s.substr(j, i);
                //cout<<r<<endl;
                if(check(r)) {flag=1; l=i;  break;}
        }
        if(flag) break;
    }
    if(!flag) { cout<<-1<<endl;}
    else cout<<l<<endl;

}
return 0;
}
///////////////////////////////////////////////////////////////

Here one thing is to notice is maximum gap it can give is of len 2. ABBACCA  if it increases the gap more will be never get that EX- ABBBACCA

So, if we couldn't find the answer upto len 7, then we will never find it.  
