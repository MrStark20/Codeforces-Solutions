#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

bool check(vector<int> &a, int limit){

    vector<int> b(a.size(), 0);

    for(int i=a.size()-1; i>=0; i--){
        if(a[i]+b[i] < limit) return false;

        int x=0;
        if(b[i]>=limit)
         x=a[i];
         else{
            x= a[i]- (limit-b[i]);
         } 

         if(i>=2)   
         b[i-1]+= x/3;
         if(i>=2)
         b[i-2]+= (x/3)*2;
    } 

   
    return true;
}


int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;
    vector<int> a(n);
    int mi=INT_MAX, mx=INT_MIN;

    rep(i,n) {
        cin>>a[i];
        mi=min(a[i], mi);
        mx=max(mx, a[i]);
    }

    int l=mi, r=mx;

    while(r-l>1){
        int m=(l+r)/2;

        if(check(a, m)){
            l=m;
        }else
        r=m;
    }

    if(check(a,l)) cout<<l<<endl;
    else
    cout<<r<<endl;
    
}
return 0;
}
