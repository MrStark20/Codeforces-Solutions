4
1 6 5 11

Given array, I have 2 tell min. difference b/w 2 subsets.


Using the same concept,  we know that the pair, we be in [0, 23].
Now, since we know that the best answer will be just on centre.

1 2 3 4 5 6 7 8 9 10 11  12  ||||| 13 14 15 16 17 18 19 20 21 22 23 

 1 5 6 7 11 |||| 12 16 17 18 23 
 
 Now, you can see the best possible answer will be the first possible subset we can get from centre.

  So, go for that 1st from centre.




  vector<vector<bool>> dp;
 
 

	int minDifference(int arr[], int n)  { 
	   if(n==1) return arr[0];
	    
	    long long sum=0;
	    for(int i=0;i<n;i++) {
	        sum+=arr[i]; 
	    }
	   
	    for(int i= ceil((1.0*sum)/2);i>=0; i--){
	        if(check(arr, n, i)){ 
	        return abs(i-(sum-i)); 
	      } 
	    } 
	    
	    return 0;
	    
	} 
	bool check(int a[], int n, int tar){
	    
	   dp.assign(n+1, vector<bool>(tar+1, false)); 
	    
	    for(int i=0;i<=n;i++){
	        for(int j=0;j<=tar;j++){
	            if(j==0){ dp[i][j]=true; continue;} 
	            if(i==0) { continue;}
	            
	            if(a[i-1]<=j)
	            dp[i][j]= (dp[i-1][ j-a[i-1]] || dp[i-1][j]);
	            else
	            dp[i][j]= dp[i-1][j];
	        }
	    }
	    
	    return dp[n][tar];
	}
};
