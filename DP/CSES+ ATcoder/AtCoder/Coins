#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<double> pro(3000);
vector<vector<double>> dp(3001, vector<double>(3001, -1));
 
double check(double n, double head){
 
    if(n==0){
        return head==0;
    }     
    if(head>n) return 0;
    if(head<0) return 0;
                               
    if(dp[n][head]>=0)     
            return dp[n][head];
 
                                              //    Probability that last coin was tail
  //    Probability that last coin was head                         \
//                                    \                               \
    return dp[n][head]= (pro[n-1]* check(n-1, head-1))+ ((1- pro[n-1]) * check(n-1, head));
 
    return dp[n][head];
}
 
 
int32_t main(){
FastHoviBaby
 
int n;
cin>>n;
 
rep(i,n){
    cin>>pro[i];
}
 
 
double x=0;
for(int i=(n+1)/2; i<=n;i++){
    x+= check(n, i);
}
cout<<setprecision(12) <<fixed<<x;
 
return 0;
}
