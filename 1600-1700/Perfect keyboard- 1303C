#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<bool> vis;
string res;
void bfs(int n, vector<vector<int>>& adj){
   
   queue<int> q;
   q.push(n);
   vis[n]=true;
    res+=('a'+n);

    while(!q.empty()){
        int x=q.front();
        q.pop();

            for(auto i: adj[x]){
                if(!vis[i]){
                    q.push(i);
                      res+= ('a'+ i); 
                      vis[i]=true; 
                }
            }
    }
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    string s;
    cin>>s;

    vis.assign(30, false);
    int n=s.size();

    if(n==1){
        cout<<"YES"<<endl;
        cout<<"abcdefghijklmnopqrstuvwxyz"<<endl;
        continue;
    }
    vector<vector<int>> adj(27);

    for(int i=1;i<n;i++){
        adj[s[i]-'a'].pb(s[i-1]-'a');
        adj[s[i-1]-'a'].pb(s[i]-'a');
    }
    int flag=0;

    int start=0,sf=0;
    rep(i,26){
        set<int> st;
        rep(j,adj[i].size()){
            st.insert(adj[i][j]);
        }
        if(st.size()==1){
            start=i; sf++;
        }
        if(st.size()>2){
            flag=1;
            break;
        }
         if(flag){
        break;
    }
    }
    if(flag || sf!=2){
        cout<<"NO"<<endl;
        continue;
    }
    res="";
    bfs((start), adj);

    string ans="";
    rep(i,26){
        if(!vis[i]){
        ans+= ('a'+i);
       
        } 
    }

    cout<<"YES"<<endl;    
    cout<<res+ans<<endl;
}
return 0;
}
