#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    string s;
    cin>>s;

    vector<int> ind;
    int count=0;
    rep(i,n){
        if(s[i]=='*'){
            ind.pb(i);
            count++;
        }
    }
    if(count<=1){
        cout<<0<<endl; continue;
    }
    
 
        int m=count/2;
    int l=ind[m]-1,r=ind[m]+1, k=m-1;
        int ans=0;
        rrep(i,m){
            ans+= l-(ind[i]); 
            l--;
        }

        for(int i=m+1;i<ind.size();i++){
            ans+=(ind[i]-r);
            r++;
        }

        if(count%2!=0){
        cout<<ans<<endl;
        }
        else{
        int ans1=0, ans2=0;
        int l1= ind[count/2 -1]-1, r1= ind[count/2 -1]+1;

        rrep(i,count/2 -1){
            ans1+= l1- (ind[i]);
            l1--;
        }

        for(int i=count/2; i<ind.size();i++  ){
            ans1+= (ind[i]-r1);
            r1++;
        }

        cout<<min(ans,ans1)<<endl;
    }

}
return 0;
}
