#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,r;
    cin>>n>>r;

    multiset<pair<int,int>> mst;
    int a[n][r];
     rep(i,n){
           rep(j,r){
               a[i][j]=-1;
                int x;
                cin>>x;
                mst.insert({x,i});
           }
       }

       rep(i,r){
           auto it= mst.begin();
           a[it->ss][i]=it->ff;
           mst.erase(it);
       }

       while(!mst.empty()){
           auto it=mst.begin();
           int f=0;
           while(a[it->ss][f]!=-1){
               f++;
           }
           a[it->ss][f]= it->ff;
           mst.erase(it);
       }

        rep(i,n){
           rep(j,r){
              cout<<a[i][j]<<" ";
           }cout<<endl;
       }

}
return 0;
}
////////////////////////////////////////////////////////////////////////
Multiset is sorted as well as set, but unordered set and multiset are not just like maps and unorderd maps. While Multisets can store duplicate, sets cannot. But while 
operating with multiset we have to be careful.
while deleting we can't delete the object, we have to delete iterator to keep the count.
