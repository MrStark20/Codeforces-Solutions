#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n,k;
int dp[2001][2001];
int count(int ind, int len){
    int ans=0;
    
    if(len>k) return 0; 
    if(len==k-1) return 1;
    if(dp[ind][len]!=-1) return dp[ind][len];
    
    for(int i=ind;i<=n;i+=ind){
        ans+= (count(i, len+1) );
        ans%=mod;
    } 

    return dp[ind][len]=ans;
}

int32_t main(){
FastHoviBaby


cin>>n>>k;
memset(dp, -1, sizeof dp);

int ans=0;
    for(int i=1;i<=n;i++){
        ans+= (count(i, 0));
        ans%=mod;
    }

    cout<<ans;

return 0;
}
/////////////////////////////////////
In this question, we fill the all possible values using recursion and to save some time we use memorization.
There is no limit of k, K can be k>n, for that case we return 0. Other than that we end the recursion at k-1 in order to avoid exceeding the length.  
