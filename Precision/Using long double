Using long double can increase precision to beyond 1e18. 

#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

class Solution {
public:
    int minimumLines(vector<vector<int>>& stockPrices) {
        
        sort(all(stockPrices));
        
        ll n=stockPrices.size();
        
        if(n==1) return 0;
        
        double ins= 1.0 * (stockPrices[1][0]-stockPrices[0][0])/ ((stockPrices[1][1]-stockPrices[0][1]));
        
        ll line=1;
        
        for(int i=2; i<n; i++){
            double slo= 1.0 * (stockPrices[i][0]-stockPrices[i-1][0])/ ((stockPrices[i][1]-stockPrices[i-1][1]));
            
            if(slo==ins){
                continue;
            }else{
                line++;
                ins= 1.0 * (stockPrices[i][0]-stockPrices[i-1][0])/ ((stockPrices[i][1]-stockPrices[i-1][1]));
            }
        }
        
        return line;
    }
};



///////////////////// This code for - Minimum lines to represent a line chart leetcode gives incorect answer on tc- [[1,1],[500000000,499999999],[1000000000,999999998]]



While if we use long double, it works


#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

class Solution {
public:
    int minimumLines(vector<vector<int>>& stockPrices) {
        
        sort(all(stockPrices));
        
        ll n=stockPrices.size();
        
        if(n==1) return 0;
        
        long double ins= (1.0 * (stockPrices[1][0]-stockPrices[0][0]))/ ((long double)(stockPrices[1][1]-stockPrices[0][1]));
        
        ll line=1;
        
        for(int i=2; i<n; i++){
            long double slo= (1.0 * (stockPrices[i][0]-stockPrices[i-1][0]))/ ((long double)(stockPrices[i][1]-stockPrices[i-1][1]));
            
            if(slo==ins){
                continue;
            }else{
                line++;
                ins= (1.0 * (stockPrices[i][0]-stockPrices[i-1][0]))/ ((long double)(stockPrices[i][1]-stockPrices[i-1][1]));
            }
        }
        
        return line;
    }
};
