#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> prime;
void factor_kro(int n){
    // prime.assign(n+1, 0);

    for(long long i=2; i<=n ; i++){
        if(prime[i]==0){
            prime[i]=i;
            for(long long p= i*i ;p <=n; p+=i){
                prime[p]=i;
            }
        }
    }
}

int32_t main(){
Jhunjhar_Hova

prime.assign(3e5+1, 0);
factor_kro(3e5);

    int n;
    cin>>n;

    vector<int> a(n);
    rep(i,n) cin>>a[i];

    int s,t;
    cin>>s>>t;

    s--; t--;

    int right= 3e5;

    vector<vector<int>> adj(2*right + 1, vector<int>{});

    rep(i,n){
        set<int> s;
        int x= a[i];
        while(x>1){
            int l=prime[x];
            x/=prime[x];
            s.insert(l);
        }
        if(x>1){
            s.insert(x);
        }
        for(auto j: s){
            adj[i].pb(j+right);
            adj[j+right].pb(i);
        }

    }

    vector<int> par(2*right +1 ) ;
    vector<int> dis(2*right +1 , 1e9);
    queue<int> q;
    q.push(s);
    dis[s]=0;
    par[s]=-1;

    while(!q.empty()){
        int x= q.front();
        q.pop();

        for(auto i: adj[x] ){
            if(dis[x]+1< dis[i]){
                dis[i]=dis[x]+1;
                par[i]= x;
                
                q.push(i);
            }
        }

    }

    if(dis[t]==1e9) {
        cout<<-1<<"\n";
        return 0;
    }

     ll cnt=0;
    int x= t;

    vector<int> ans;
    while(x!=-1){

        if(x<n)
        ans.pb(x+1);
          x= par[x];
    }

    cout<<ans.size()<<"\n";
    rrep(i, ans.size()) cout<<ans[i]<<" "; 



return 0;
}
