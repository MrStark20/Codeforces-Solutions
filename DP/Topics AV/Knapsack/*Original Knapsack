

  wt[]= 1 2 3 4
 val[]= 4 1 2 4
 
 Total Weight knapsack can carry= 4.
 Max val we can get= 6 (wt[1] & wt[3])
 
 1. Recursively
 
 int recur(int W, wt[], val[], int n){
  base case- 
    if(n==0 || W==0)
      return 0;
      
    if(wt[n-1]<=W)
        return max( (val[n-1]+ recur(W-wt[n-1], wt, val, n-1)) ,  recur(W,wt, val, n-1));
        
    else
        return recur(W, wt, val, n-1);
 }

---------------------------------------------------------------------------------------------------------------

 2.Recur+ memorization-
 
  vector<vector<int>> dp(1005, vector<int> (1005,-1));
    int recur(int W, wt[], val[], int n){
    base case- 
    if(n==0 || W==0)
      return 0;
      
     if(dp[n][W] !=-1)
      return dp[n][W];
      
    if(wt[n-1]<=W)
        return dp[n][W]= max( (val[n-1]+ recur(W-wt[n-1], wt, val, n-1)) ,  recur(W,wt, val, n-1));
        
    else
        return  dp[n][m]= recur(W, wt, val, n-1);
 }
 
----------------------------------------------------------------------------------------------------------------------

3. Iteration (Top-Down)
  We will do the same thing perhaps using i and j in place of n and W respectively.
  
    vector<vector<int>> dp(1005, vector<int> (1005,-1));
    
     int recur(int W, wt[], val[], int n){
     
      rep(i, n+1){
          rep(j, W+1){
          
          if(i==0 || j==0 ) {dp[i][j]=0; continue;}
          
          if(wt[i-1]<= j){
           dp[i][j]= max( val[i-1]+ dp[i-1][j-wt[i-1]],  dp[i-1][j]);
           }
           else
           dp[i][j]= dp[i-1][j];
       }
      }
      
      return dp[n][W];
      
     }
    
    
