#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    int a[n];
    int b[n];
    int ans[n+1][n+1];
    int g=n,f=1,newF=0,check=0;

    rep(i,n){
        cin>>a[i]; b[i]=a[i];
         ans[i][0]=a[i];
    }
     while(g-- ){
         int flag=0;
                if(!newF){
                
                map<int,int> m2;
                
                rep(i,n){
                m2[b[i]]++;
                }   
             rep(i,n){
            if(b[i]!=m2[b[i]]) {
            flag=1;
            break;
             }
             }
                   
            rep(i,n){
                 b[i]=m2[b[i]];
                 ans[i][f]=b[i];
        }
     }
                if(newF) {
                     rep(i,n){
                ans[i][f]=b[i];
                }
                }
            if(!flag && newF==0) newF=1;
            f++;
            }
     
  

    int q;
    cin>>q;
    while(q--){
        int x, k;
        cin>>x>>k;
        
        if(k>=n) cout<<ans[x-1][n]<<endl;
        else cout<<ans[x-1][k]<<endl;
        }
}
    

return 0;
}
