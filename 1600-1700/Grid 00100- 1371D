#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,k;
    cin>>n>>k;

    int g[n][n];
    rep(i,n){
        rep(j,n){
            g[i][j]=0;
        }
    }

    
  ///// Fill as many diagonals as possible
  
    for(int i=0;i<n;i++){
        int row=0;
        int u=i;
        while(k>0 && u<n){
            k--;
            g[row][u]=1;
            u++; row++;
        }

        u=0;
        while(k>0 && row<n){
            k--;
             g[row][u]=1;
            u++; row++;
        }
  
    }

    

    vector<int> difr, difc;
    rep(i,n){
        int s=0;
            rep(j,n){
                s+=g[i][j];
            }
            difr.pb(s);
    }
    sort(all(difr));
    int y=(difr[difr.size()-1]- difr[0]);

      rep(i,n){
        int s=0;
            rep(j,n){
                s+=g[j][i];
            }
            difc.pb(s);
    }
    sort(all(difc));
    int z= (difc[difc.size()-1]- difc[0]);

    cout<<(y*y)+ (z*z) <<endl;

    rep(i,n){
        rep(j,n){
            cout<<g[i][j];
        }cout<<endl;
    }

}
return 0;
}
