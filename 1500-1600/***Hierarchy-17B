Nick's company employed n people. Now Nick needs to build a tree hierarchy of «supervisor-surbodinate» relations in the company
(this is to say that each employee, except one, has exactly one supervisor). There are m applications written in the following form: 
«employee ai is ready to become a supervisor of employee bi at extra cost ci». The qualification qj of each employee is known, and for each 
application the following is true: qai > qbi.


4
7 2 3 1
4
1 2 5
2 4 1
3 4 1
1 3 5


Here we had several edges but 
1. We had to make sure one employee doesn't have 2 bosses.So, we used bool array.
2. We had to also make sure whatever edge we take in 1st attempt has to be minimum because later we don't have option to make choices. So, we used a Pair like Edge DS.
   and sorted using it.
   
   And if any employee is left without supervisor except the parent, we answer -1. 
   
   
   #include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
struct dsu{
    vector<int> parent, rank;
 
    void makeset(int n){
        parent.assign(n+1, 0);
        rank.assign(n+1, 0);
        for(int i=1;i<=n;i++) parent[i]=i;
    }
    int find(int x){
        while(parent[x]!=x)
            x=parent[x];
 
            return x;
    }
 
    void unite(int u, int v){
        u=find(u);
        v=find(v);
 
        if(u!=v){
 
            if(rank[u]<rank[v]){
                parent[u]=v;
                rank[v]+=rank[u];
            }else{
                 parent[v]=u;
                rank[u]+=rank[v];
            }
            
        }
    }
};
 
    struct edge{
        int a,b,c;
        bool operator< (const edge& other){
            return c< other.c;
        }
    };
 
int32_t main(){
FastHoviBaby
 
int n;
cin>>n;
dsu d;
d.makeset(n);
int ar[n];
rep(i,n) cin>>ar[i];
    int m;
    cin>>m;
 
    vector<edge> edges;
    rep(i,m){
        int a,b,c;
        cin>>a>>b>>c;
        edges.pb({a,b,c});
    }
 
     vector<bool> vis(n+1,false);
     sort(all(edges));
    int ans=0;
    rep(i,m){
        if( d.find(edges[i].a) != d.find(edges[i].b) && !vis[edges[i].b]){
            ans+= edges[i].c;
            vis[edges[i].b]=true;
            d.unite( edges[i].a, edges[i].b);
        }
    }
    int check=0; 
    for(int i=1;i<=n;i++){
        if(!check) check=d.find(i);
        else{
            if(d.find(i)!= check) { cout<<"-1"; return 0;}
        }
    }
 
    cout<<ans;
 
return 0;
}
