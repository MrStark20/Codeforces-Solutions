#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
string t,s;
bool check(string s){
    string f="";
    rep(i,s.size()) f+='*';
    int j=s.size()-1;
    rrep(i,t.size()){
        if(t[i]==s[j]){
            s[j]='*'; j--;
            if(j<0) break;
        }
    }
    if(s==f) return true;
    return false;
}

int32_t main(){
FastHoviBaby


cin>>t>>s;
      if(s==t){
          cout<<"array"; return 0;
      }  
      if(check(s)){
          cout<<"automaton";
          return 0;
      }
      map<char,int> m;
      rep(i,t.size()){
          m[t[i]]++;
      }

      int flag=0;
      rep(i,s.size()){
          if(m[s[i]]<=0){ flag=1; break;}
          else{
              m[s[i]]--;
          } 
      }
      int f2=0;
      rep(i,26){
          char a='a'+i;
          if(m[a]>0) {f2=1; break;}
      }

      if(flag) cout<<"need tree";
      else if(f2 && !flag) cout<<"both";
      else cout<<"array";

return 0;
}
