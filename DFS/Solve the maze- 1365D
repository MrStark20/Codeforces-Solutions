#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<vector<char>> g; 
vector<vector<bool>> vis;
int n,m;

void dfs(int r,int c){
    vis[r][c]=true;

    if(r>1 && !vis[r-1][c] && (g[r-1][c]=='.' || g[r-1][c]=='G')) { dfs(r-1, c); }
    if(c>1 && !vis[r][c-1] && (g[r][c-1]=='.' || g[r][c-1]=='G')) { dfs(r, c-1); }
    if(r<n && !vis[r+1][c] && (g[r+1][c]=='.' || g[r+1][c]=='G')) {dfs(r+1, c); }
     if(c<m && !vis[r][c+1] && (g[r][c+1]=='.' || g[r][c+1]=='G')) {dfs(r, c+1); }
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    
    cin>>n>>m;
    g.assign(n+1, vector<char> (m+1));
    vis.assign(n+1, vector<bool> (m+1));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>g[i][j];
        }
    }
    int flag=0;
    vector<pair<int,int>> gedge;
     for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(g[i][j]=='B'){
            if(i>1 && g[i-1][j]=='G') { flag=1; break;}
            if(i<n && g[i+1][j]=='G') {flag=1; break;}
            if(j>1 && g[i][j-1]== 'G') {flag=1; break;}
            if(j<m && g[i][j+1]=='G' ) {flag=1; break;}
            }
            else if(g[i][j]=='G')
            gedge.pb(mp(i,j));
        }
        if(flag) break;
    }
        if(flag){
            cout<<"No"<<endl;
            continue;
        }

     for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(g[i][j]=='B'){
            if(i>1 && g[i-1][j]=='.') { g[i-1][j]='#';}
            if(i<n && g[i+1][j]=='.') { g[i+1][j]='#';}
            if(j>1 && g[i][j-1]== '.') { g[i][j-1]='#'; }
            if(j<m && g[i][j+1]=='.' ) { g[i][j+1]='#'; }
            }
        }
    }
    if(gedge.size()==0){ cout<<"Yes"<<endl; continue; }
    if(g[n][m]=='#'){ cout<<"No"<<endl; continue; }
    
    dfs(n,m);

    rep(i,gedge.size()){
        if(!vis[gedge[i].ff][gedge[i].ss]) {flag=1; break;}
    }
   

    if(flag) cout<<"No"<<endl;
    else cout<<"Yes"<<endl;
}
return 0;
}
