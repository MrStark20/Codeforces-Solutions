
In this we are given a string and a pattern, and we have to tell that can we extract the exact string S from pattern P by using '?' and '*' that might be

given in Pattern P string.

'?' - can be converted into any char
'*' - can be converted into into sequence, even empty.

abc
ab*c
YES

abxc
a?*c
YES

By recursion :-

   vector<vector<bool>> dp;


    int wildCard(string pattern,string str)
    {
        int m=pattern.size(), n=str.size();
        dp.assign(n+1, vector<bool>(m+1, false));
        
        if(m>n && count(pattern.begin(), pattern.end(), '*')==0) return false;
         if(n>m && count(pattern.begin(), pattern.end(), '*' )==0) return false;
        
        bool f= check(str, pattern, n, m);
        
        if(f) return 1;
        return 0;
    }
    
    
    
    bool check(string s, string t, int n, int m){
        if(n<=0 && m<=0) return true;
        if(n>0 && m<=0) return false;
        
        if(n<=0 && m>0){ 
           for(int i=0;i<m;i++)
                if(t[i]!='*')
                    return false;
            
            return true;
        }
        if(m==0 || n==0) return false;
        if(dp[n][m])
            return dp[n][m];    
        
        if(s[n-1]==t[m-1] || t[m-1]=='?'){
            return dp[n][m]=check(s,t, n-1, m-1);
            
            }
        else if(t[m-1]=='*'){
           return  dp[n][m]= check(s,t,n-1,m) || check(s,t, n, m-1);
        }
       return dp[n][m]=false;
    }
    
    
    
    
    
    
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    So, the code is more or less same as standard approach. But i was getting continous TLE.
The problem was that i was using a boolean 2-D vector and there was no differentiating initialization to
correctly use memorization. While i was looking in discussion i saw few people doing query about TLE in recursion.
So, this might help if you were committing the mistake that i was.

Earlier, Code was like this
```
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long
 
class Solution {
    
    
public:
    vector<vector<bool>> dp;
    bool isMatch(string s, string p) {
        
    
        ll x=(count(all(p), '*')>0) ? count(all(p), '*'):0 ;
        
        int n=s.size(), m=p.size();
        if(m>n && x==0) return false;
        else if(n>m && x==0) return false;
        
        dp.assign(n+1, vector<bool>(m+1, false));
   
        
        bool y= check(s,p, n ,m);
        return y;
       
    }
    
    bool check(string &s, string &t, int n, int m){
        if(n<=0 && m<=0) return true;
        if(n>0 && m<=0) return false;
   
        if(n<=0 && m>0){ 
            rep(i,m)
                if(t[i]!='*')
                    return false;
            
            return true;
        }
        if(m==0 || n==0) return false;
		
       if(dp[n][m])    /////////////  HERE WE CAN SEE THAT NOTHING is differentiating b/w true or false, if we have false we still have to go though whole process.
	   
            return dp[n][m];    
        
        if(s[n-1]==t[m-1] || t[m-1]=='?'){
            return dp[n][m]=check(s,t, n-1, m-1);
            
            }
        else if(t[m-1]=='*'){
            
          
                return dp[n][m]= check(s,t,n-1,m) || check(s,t, n, m-1);
        }
       return dp[n][m]=false;
    }
};
```
Meanwhile if we use a int 2D with initialization as -1. We can also memorize the false case

```
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long
 
class Solution {
    
    
public:
    vector<vector<int>> dp;
    bool isMatch(string s, string p) {
        
    
        ll x=(count(all(p), '*')>0) ? count(all(p), '*'):0 ;
        
        int n=s.size(), m=p.size();
        if(m>n && x==0) return false;
        else if(n>m && x==0) return false;
        
        dp.assign(n+1, vector<int>(m+1, -1));
   
        
        bool y= check(s,p, n ,m);
        return y;
       
    }
    
    bool check(string &s, string &t, int n, int m){
        if(n<=0 && m<=0) return true;
        if(n>0 && m<=0) return false;
     
        if(n<=0 && m>0){ 
            rep(i,m)
                if(t[i]!='*')
                    return false;
            
            return true;
        }
		 if(m==0 || n==0) return false;
  
        if(dp[n][m]!=-1)
            return dp[n][m];    
        
        if(s[n-1]==t[m-1] || t[m-1]=='?'){
            return dp[n][m]=check(s,t, n-1, m-1);
            
            }
        else if(t[m-1]=='*'){
            
          
                return dp[n][m]= check(s,t,n-1,m) | check(s,t, n, m-1);
        }
       return dp[n][m]=false;
    }
};
