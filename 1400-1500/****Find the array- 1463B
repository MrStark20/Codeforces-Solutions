#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    int a[n];
    int s=0;
    int sumo=0, sume=0;
    rep(i,n){
        cin>>a[i];
        if(i%2==0) sume+=a[i];
        else sumo+=a[i];
    }

    
   
       vector<int> ans;
       if(sumo>=sume){
       rep(i,n){
           if(i%2==0){
               ans.pb(1);
           }else {
               ans.pb(a[i]);
           }
       }
       }
       else{
             rep(i,n){
           if(i%2==1){
               ans.pb(1);
           }else {
               ans.pb(a[i]);
           }
       }
       }


       rep(i,n) cout<<ans[i]<<" ";
        cout<<endl;
   
}
return 0;
}

//////////////////////////////////////////////////////////////////////
In this we have a guarantee that, sum at even+ sum at odd= total sum. So one of them >= other and smaller one will be at max, s/2.
 So, if sum at even pos is greater we change odd positions to 1. so,  that their diff will be less and 1 will fulfill neighbour condition.
 
 Opposite if odd pos is more.
