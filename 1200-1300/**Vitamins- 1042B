#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby
int n;
cin>>n;

    string check;
    vector<pair<int,string>> v(n);
    rep(i,n){
        cin>>v[i].ff;
        string x;
        cin>>x;
        sort(all(x));
        v[i].ss=x;
        check+=v[i].ss;
    }
    if(check.find('A')==-1 || check.find('B')==-1 || check.find('C')==-1){
        cout<<-1<<endl;
        return 0;
    }

    sort(all(v));
    int y=INT_MAX;
    int a=y,b=y,c=y, ab=y, bc=y, ac=y, abc=y;


    rep(i,n){
        if(v[i].ss =="A") a=min(a, v[i].ff);
        else if(v[i].ss=="B") b=min(b,v[i].ff);
        else if(v[i].ss=="C") c=min(c, v[i].ff);
        else if(v[i].ss=="AB") ab=min(ab, v[i].ff);
        else if(v[i].ss=="BC") bc= min(bc, v[i].ff);
        else if(v[i].ss=="AC") ac= min(ac, v[i].ff);
        else if(v[i].ss=="ABC" ) abc= min(abc, v[i].ff);
    }

    vector<int> ans;
    ans.pb(a+b+c); ans.pb(bc+a); ans.pb(ab+c); ans.pb(ac+b); ans.pb(abc); ans.pb(ab+bc); ans.pb(ab+ac); ans.pb(bc+ac);
    sort(all(ans));
    cout<<ans[0]<<endl;

return 0;
}
