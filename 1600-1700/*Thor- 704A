#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,q;
cin>>n>>q;
unordered_map<int,int> m;
unordered_map<int,int> m2;
unordered_map<int,int> m3;
vector<int> ch;
int ans=0;
int k=0;
    while(q--){

        int x,y;
        cin>>x>>y;
        
        if(x==1){
            m[y]++;
            ans++;

            ch.pb(y);
        }else if(x==2){

            if(m[y]>m2[y])    
            ans-=(m[y]-m2[y]);

            m2[y]=m[y];
        }else{
           

           
             if(y>k){
          
            
            
            for(int i=k;i<k+(y-k);i++){
                m3[ch[i]]++;
                ans+=m2[ch[i]];
                m2[ch[i]]= max(m3[ch[i]], m2[ch[i]]);
                 ans=max((int)0, ans-m2[ch[i]]);
            }
            k+=(y-k);
          }
            

        }
       
         cout<<ans<<endl;


    }

return 0;
}
