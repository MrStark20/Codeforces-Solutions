#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;


vector<int> a(n), b(n);

rep(i,n){
    cin>>a[i]; b[i]=a[i];
}

    sort(all(b));

    int r= ((b[n-1]+1)/2) + ((b[n-2]+1)/2) +1;

    int l=0;

    // while(r-l>1){

    //     int m=(l+r)/2;



        int mi=((b[0]+1)/2) + ((b[1]+1)/2);

        rep(i,n-1){
           
           int move= ceil((1.0*(a[i]+a[i+1]))/3);

           int mx= max(a[i+1], a[i]);

              
            mx-= (move*2);
            if(mx>0)
            move+= ceil((1.0*mx)/2);

            mi=min(mi, move);

        }

        for(int i=1;i<n-1;i++){
            int x=  min(a[i-1], a[i+1]);

            int y=max(a[i-1], a[i+1]);

            y-=x;

            int now= x+ ((y+1)/2);

            mi= min( mi, now);
        }


  cout<<mi<<endl;

return 0;
}
