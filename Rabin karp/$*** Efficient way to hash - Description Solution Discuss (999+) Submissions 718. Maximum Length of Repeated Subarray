Video Link - "https://www.youtube.com/watch?v=wh1APrnUfF8&t=3373s" ,
                                                  Just be aware of one mistake he did, we have to take the value of pi not p(i-1). 
                                                  
                                                  
H(i, j) = (H(j)- H(i-1)) / p(i)

P is inverse of the base p to i, p^(-i)

It can be proved that this formula stands correct,

Implementation.



--------------------------------------------------------------------------------

#define ll long long
#define pi (3.141592653589)
#define mod 1000000007 
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}



public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        
        
        ll p=107;
        int n1=nums1.size(), n2=nums2.size();
        
        vector<ll> inv(1e3+2, 1), v(1e3+2, 1);
        ll m_inv= modp(p, mod-2, mod);
        
        for(int i=1; i<=1e3; i++){
            inv[i] = (inv[i-1] * m_inv)%mod;
            if(inv[i]<0) inv[i]+=mod;
        }
        for(int i=1; i<=1e3; i++){
            v[i] = (v[i-1] * p)%mod;
            if(v[i]<0) v[i]+=mod;
        }
        
        
        vector<ll> hash1(n1+n2+1, 0), hash2(n2+n1+1, 0);
        
        ll cur= 0;
        rep(i,n1){
            
            hash1[i] = ((i>0 ? hash1[i-1]: 0) +  ((v[i])*(nums1[i]+1))%mod)%mod;
            if(hash1[i]<0) hash1[i]+=mod;
        }
        
        cur=0;
        rep(i,n2){
            hash2[i] =( (i>0 ? hash2[i-1]: 0) +  ((v[i])*(nums2[i]+1))%mod)%mod ;
            if(hash2[i]<0) hash2[i]+=mod;
        }
        
        ll l=0, r= min(n1, n2)+1;
        while(r-l>1){
            ll m= (r+l)/2;
            
            map<ll,ll> m1;
            
            rep(i,n1 - m+1){
                ll hash= (hash1[i+m-1] - (i>0 ? hash1[i-1] : 0))%mod;
                if(hash<0) hash+=mod;
                ll now=inv[i];
                
                ll lol = (hash*now)%mod;
                m1[lol]++;
            }
            
            ll flag=0;
            rep(i,n2 - m+1){
                ll hash= (hash2[i+m-1] - (i>0 ? hash2[i-1] : 0))%mod;
                if(hash<0) hash+=mod;
                 ll now= inv[i];
                
                ll lol = (hash*now)%mod;
                
                
                if(m1.find(lol)!= m1.end()) {  flag=1; break;  }
            }
            if(flag) l=m;
            else r=m;
            
        }
        
        return l;
        
    }
};


