#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
void recur(int mx, int mi, vector<int> &a, map<ll, ll> &m1){

    //rep(i,a.size()) cout<<a[i]<<" "; cout<<endl;

    if(a.size()==1){
        m1[a[0]]++;
        return ;
    }


    if(mx==mi){
        int x= mi*a.size();
        m1[x]++;
        return;
    }
    int sum=0;
     rep(i,a.size()) sum+=a[i];
     m1[sum]++;  


    int l= (mx+mi)/2;

    auto  k= upper_bound(all(a), l);

    int index=-1;
  
        index= k-a.begin();
        index-=1;

        vector<int> b;
        
        b.assign(a.begin(), a.begin()+index+1);
        recur(a[index],a[0], b, m1);

        vector<int> c;
        c.assign(a.begin()+index+1, a.end());
        recur(a.back(),a[index+1], c, m1);

    



}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,q;
    cin>>n>>q;

    vector<int> a(n);

    rep(i,n) cin>>a[i];

    map<ll, ll> m;

    sort(all(a));
    recur(a.back(), a[0], a, m);

    while(q--){
        int x;
        cin>>x;

        if(m[x]>0) cout<<"Yes"<<endl;
        else cout<<"No"<<endl;
    }

   
}
return 0;
}
