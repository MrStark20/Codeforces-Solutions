We don't use r-l>1 for double, instead of it we iterate.

-------------------------------

 Meeting on the Line
 
 #include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

pair<long double, long double> intersect(pair<long double, long double> &a, pair<long double, long double> &b){

    if(a.ss <b.ff || a.ff>b.ss) return {-1,-1};

    return {max(a.ff,b.ff), min(a.ss, b.ss)};
} 

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    vector<double> a(n),b(n);
    rep(i,n) cin>>a[i];
    rep(i,n){
        cin>>b[i];
    }
    if(n==1){
        cout<<a[0]<<endl;
        continue;
    }

        int l=0, r=1e9;

        long double ans= -1;
        
    rep(i, 50){
        double m= (l+r)/2;
        int flag=0;
         pair<long double, long double> full_range {0, 1e9};

        rep(i,n){
            if(b[i]>m) {
                flag=1;
                break;
            }

            int dif= m- b[i];

            pair<long double, long double> range= { a[i]- dif, a[i]+dif}; 

            full_range= intersect(range, full_range);
            if(full_range.ff ==-1){
                flag=1;
                break;
            }
        }
        if(flag){
            l=m;
        }else{
            r=m;
            ans= (full_range.ff+ full_range.ss)/2;
        }

    }

    cout<<fixed<<setprecision(12)<<ans<<endl;

}
return 0;
}
