#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int a[3][3];
    int mx=INT_MIN;
    rep(i,3){
        int s=0;
        rep(j,3){
            cin>>a[i][j];  
        }
    }

    
    while(true){
        int s1=a[0][1]+a[0][2]+a[0][0];
        int s2=a[1][0]+a[1][1]+a[1][2];
        int s3=a[2][0]+a[2][1]+a[2][2];
        int d= a[0][0]+a[1][1]+a[2][2];
        if(d==s1 && d==s2 && d==s3) break;

       
      if(s1<=s2 && s1<=s3) a[0][0]++;
      else if(s2<=s1 && s2<=s3) a[1][1]++;
      else if(s3<=s1 && s3<=s2) a[2][2]++;
    }



     rep(i,3){
        rep(j,3){
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }

return 0;
}
