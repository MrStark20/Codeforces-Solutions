#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

string s;
string ans="";
vector<vector<int>> dp;

bool check(string a, int n){ 


     if(n<=-1){
       return false;
   }

      string k="";
    int c=a.size();
   for(int i=c- min(c,(int)3) ; i<c; i++){
        k+=a[i];
    }
    int x=0;
    if(k.size()>0){
     x= stoll(k);
    if(x%8==0){
        ans=a;
        dp[x][n]=1;
        return true;
    }else{
        if(x>99 && x<1000){
        dp[x][n]=0;
        return false;
        }
    }
     if(dp[x][n]!=-1) {
        return dp[x][n];
    }

    }


        string p=a, prev=a;
        p.insert(p.begin(), s[n-1]);
    return dp[x][n]= (check(p, n-1 ) | check(prev, n-1));

}

int32_t main(){
FastHoviBaby

cin>>s;

int n=s.size();

dp.assign(1001, vector<int>(n+1, -1) );
string u="";
    if(check(u,n)){
        cout<<"YES"<<endl;
        cout<<ans<<endl;
    }else
    cout<<"NO"<<endl;

return 0;
}
