#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n,m,k;
const int N= 55;
vector<int> adj[N];
vector<vector<bool>> vis(N, vector<bool>(N,false)) ;
vector<vector<char>> g(N, vector<char>(N,0) );

void dfs(int r, int c, int hehe){
    vis[r][c]=true;
    if(hehe)
    g[r][c]='*';
     if(r>1 && !vis[r-1][c] && g[r-1][c]=='.') {dfs(r-1, c, hehe); }
     if(c>1 && !vis[r][c-1] && g[r][c-1]=='.') {dfs(r,c-1, hehe);}
     if(r<n && !vis[r+1][c] && g[r+1][c]=='.') {dfs(r+1,c, hehe); }
     if(c<m && !vis[r][c+1] && g[r][c+1]=='.') {dfs(r, c+1, hehe);}

}
int d=0;
void dfs2(int r, int c){
    vis[r][c]=true;
     d++;

     if(r>1 &&  !vis[r-1][c] && g[r-1][c]=='.') {dfs2(r-1, c); }
     if(c>1 &&  !vis[r][c-1] && g[r][c-1]=='.') {dfs2(r,c-1 );}
     if(r<n && !vis[r+1][c] &&  g[r+1][c]=='.') {dfs2(r+1,c ); }
     if(c<m && !vis[r][c+1] &&  g[r][c+1]=='.') {dfs2(r, c+1);}

}
struct tpair{
    int a,b,c;
    bool operator < (const tpair& other){
        return c< other.c;
    }
};

int32_t main(){
FastHoviBaby


cin>>n>>m>>k;

    rep(i,n){
        string s;
        cin>>s;
        rep(j,m){
            g[i+1][j+1]= (s[j]);
            adj[i+1].pb(j+1);
            adj[j+1].pb(i+1);
        }
    }

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(  !vis[i][j]  && (i==1 || j==1 || j==m || i==n)   && g[i][j]=='.' ){
                dfs(i,j,0);
            } 
          
        } 
    }

    vector<tpair> ch;
     for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(!vis[i][j] && g[i][j]=='.'){
                d=0;    
                dfs2(i,j); 
                ch.pb({i,j,d});
            }
        }
    }

    sort(all(ch));
    int ans=0;

    vis.assign(n+1, vector<bool>(n+1, false));
    rep(i,ch.size()-k){
    ans+= ch[i].c;
    dfs(ch[i].a, ch[i].b, 1);
    }

    cout<<ans<<endl;
     for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
           cout<<g[i][j];
        }cout<<endl;
    }

return 0;
}
