#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,k,q;
cin>>n>>k>>q; 

int a[200005];
memset(a, 0,  sizeof a);
        int s=n;
        while(s--){
            int x,y;
            cin>>x>>y;

            a[x]++; a[y+1]--;

        }
        for(int i=1;i<=200005; i++ ){
            a[i]=a[i-1]+a[i];
        }
        int count=0;
       vector<int>  pre(200005, 0);

        pre[1]= ((a[1]>=k)? 1:0  );

       for(int i=2;i<=200004;i++ ){
          pre[i]= pre[i-1]+ ((a[i]>=k)? 1:0  ) ; 
          
       }


        while(q--){
            int x=0,y=0;
            int ans=0;
            cin>>x>>y;
            ans= pre[y]- (pre[x-1]);
            cout<<ans<<endl;
        }    

return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

This is a classic diff. array question. 
n=3  k=2 q=4
91 94
92 97
97 99
q:-
92 94
93 97
95 96
90 100

Here, n times query appery and its says us to increment freq by 1 each time.
So, we use diff array 
It looks something like-

  89 90 91 92 93 94 95 96 97 98 99 100 
   0  0  1  2  2  2  1  1  2  1  1  0  

So, as we can see it clearly now shows how many time, 1 temp was recalled.

Now, to cal. answer we use a prefix array. Whenever we see a temp. recommended by >=k recipes we increment pre[i]+=1.
