
Standard coin change problem of unbounded knapsack.

  We initialize 0th row as INT_MAX-1 b/c INT_MAX will overflow for int. (Remember we are using int instead of long long to prevent stack error.)
  
    Why INT_MAX-1? 
    -> Coin is 0. B/c it has infinite way to give answer.( ~ -1 ways)
    
    0th col is 0. b/c we don't have any amount.
    1st row is initialized for any (j<=amount) divisible by 1st coin. else INT_MAX-1.
    
    
    
#include <bits/stdc++.h>
using namespace std;
//#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
 
int32_t main(){
FastHoviBaby
 
int n, k;
cin>>n>>k;
int a[n];
rep(i,n)
cin>>a[i];
 
    vector<vector<int>> dp(n+1, vector<int>(k+1, 0));
 
    for(int i=0;i<=k;i++){
        if(i%a[0]==0)
        dp[1][i]= i/a[0];
        else
            dp[1][i]= INT_MAX-1;
    }
 
    for(int i=0;i<=n;i++){
        for(int j=0;j<=k;j++){
            if(i==0){
                dp[i][j]=INT_MAX-1;
                continue;
                }
            if(j==0){
                dp[i][j]=0;
                continue;
            }    
            if(i==1) continue;
 
            if(a[i-1]<=j){
                dp[i][j]=min(1+ dp[i][j-a[i-1]], dp[i-1][j] );
            }
            else
            dp[i][j]= dp[i-1][j];
 
        }
    }
 
    cout<<((dp[n][k]== INT_MAX-1)? -1: dp[n][k]);
 
return 0;
}
