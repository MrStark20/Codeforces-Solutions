Here, because of tighter constraints we won't be able to calculate in O(sqrt(n)), so we use sieve of eratosthenes to do it in O(logn)


#include <bits/stdc++.h>
using namespace std;
// #define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> prime;
void factor_kro(int n){
    // prime.assign(n+1, 0);

    for(long long i=2; i<=n ; i++){
        if(prime[i]==0){
            prime[i]=i;
            for(long long p= i*i ;p <=n; p+=i){
                prime[p]=i;
            }
        }
    }
}

vector<int> factors(int n){

    vector<int> ans;

    while(n>1){
        int x=prime[n];
        ans.pb(prime[n]);
        while(n>1 && n%x==0) n/=x;
    }

    return ans;
}


int32_t main(){
Jhunjhar_Hova


prime.assign(10000005, 0);
factor_kro(10000000);

int t=1;
cin>>t;
while(t--){
    
    int x,y;
    cin>>x>>y;
    if(gcd(x,y)!=1){
        cout<<0<<endl;
        continue;
    }

    if(x+1 == y ){
        cout<<-1<<endl;
        continue;
    }
    if(x%2==1 && y%2==1){
        cout<<1<<endl;
        continue;
    }
    
    int d= y-x;

    int ans=-1;
    int mi=100000022;
    vector<int> p =factors(d);

    for(int i=0; i<p.size() ; i++){
        if(d%p[i]==0){
             mi = min(mi, p[i] - (x%p[i])) ;
        }
    } 
   

    mi= min(mi, d-(x%d));
    
     cout<<mi<<endl;
}
return 0;
}
