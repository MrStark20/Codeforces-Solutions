#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;


while(t--){
    int n;
    cin>>n;
    int a[n];
    bool b[n];
    int ans[n]={0};
    
    rep(i,n){
        cin>>a[i];
    }
    
    vector<int> check=  { 2,3,5,7,11,13,17,19,23,29,31};
    map<int,vector<int>> m;

  

    int k=1;
    
    rep(i,check.size()){

        int flag=0;

        rep(j, n){
            if(ans[j]!=0) continue;

            if(a[j]% check[i]!=0) continue;

            flag=1;
            ans[j]=k;

        }
        if(flag) k++;
    }

    cout<<k-1<<endl;
    for(auto i:ans) cout<<i<<" "; cout<<endl;

}
return 0;
}
/////////////////////////////////////////////////////////////////
Every composite no. must have a divisor prime less than sqrt(n). So, max a[i] is 1000. And sqrt(1000) ~~ 32. So, int total we can have 11 primes--- 2,3,5,7,11,13,17,19,23,29,31.

Every given composite no. must be divisible by any one of them atleast. After this observation we implement it. Presence of all color should be there upto m.

So, to deal with it we run a loop for every value of check. So, that our order is ascending and contigous.
