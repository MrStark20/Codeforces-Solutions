#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;

 vector<pair<int,int>> v(n);
 map<pair<int,int>, vector<int>> m;

    int mx=0;

    rep(i, n){
        int x,y;
        cin>>x>>y;

        v[i].ff=x, v[i].ss=y;
        pair<int,int> p;
        p.ff=x; p.ss=y;
        m[p].pb(i+1);
        mx=max(mx, v[i].ss);
    }

    sort(all(v));
    vector<int> amount(n);
    
    rep(i,n) amount[i]= v[i].ff;    

    int k;
    cin>>k;

    vector<pair<int,int>> avail(k);
    int sum=0, taken=0;

    vector<pair<int,int>> ans;


    rep(i,k){
        cin>>avail[i].ff;
        avail[i].ss=i+1;

    }
    sort(all(avail));

    rep(i,k){

        int l=0, r=mx+1;


       auto it= upper_bound(all(amount), avail[i].ff); 
        if(it==amount.end()) r=n;
        else 
        r= it-amount.begin(); 

        int index=0, mx2=0;
       for(int i=0;i<r;i++){
           if(v[i].ss>mx2){
               mx2=v[i].ss;
               index= i;
           }
       } 
       if(mx2>0){
           v[index].ss=0;
           sum+=mx2;
           pair<int,int> s;
           s.ff=v[index].ff;
           s.ss=mx2;
           int y= m[s][m[s].size()-1];
           m[s].pop_back();

           ans.pb(mp(y, avail[i].ss));
       }
        
    }

    cout<<ans.size()<<" "<<sum<<endl;
    for(auto i: ans) cout<<i.ff<<" "<<i.ss<<endl;


return 0;
}
