#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<vector<bool>> vis(55, vector<bool>(55, false));  
vector<vector<int>> a(55, vector<int>(55, -1)); 

vector<pair<int,int>> ch;
vector<pair<int,int>> ch2;

void dfs(int r, int c,int hehe){
    
    vis[r][c]=true;
    if(hehe==1)
    ch.pb(mp(r,c));
    else
    ch2.pb(mp(r,c));

    if(r>0 && (a[r-1][c]==0 && !vis[r-1][c])) { dfs(r-1,c, hehe);}
    if( (a[r+1][c]==0 && !vis[r+1][c])) { dfs(r+1,c, hehe);}
    if(c>0 && (a[r][c-1]==0 && !vis[r][c-1])) { dfs(r,c-1, hehe);}
    if( (a[r][c+1]==0 && !vis[r][c+1])) { dfs(r,c+1, hehe);}

}

int32_t main(){
FastHoviBaby
int n;
cin>>n;
int r1,c1,r2,c2;
cin>>r1>>c1>>r2>>c2;


    rep(i,n){
        string s;
        cin>>s;
        rep(j,n){
              a[i][j]=(s[j]-'0');  
        }
    }
    

    dfs(r1-1,c1-1,1);
    if(vis[r2-1][c2-1]) {cout<<'0'; return 0;}

    dfs(r2-1, c2-1,2);

    int mi=INT_MAX;



    rep(i,ch.size()){
        rep(j,ch2.size()){
        mi= min(mi, ( abs((ch[i].ff-ch2[j].ff)*(ch[i].ff-ch2[j].ff))  + abs((ch[i].ss-ch2[j].ss)*(ch[i].ss-ch2[j].ss )) ));
           
        } 
    }
    cout<<mi;

return 0;
}
