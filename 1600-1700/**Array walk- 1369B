#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,k,z;
    cin>>n>>k>>z;

    vector<int> a(n, 0);

    rep(i,n) cin>>a[i];

    int start=a[0];

    int mxs=a[0];

    int w=k;
    for(int i=1; i<n;i++){
        if(w<=0) break;
        mxs+=a[i];
        w--;
    }

    int pre[n];
    pre[0]=a[0];
    for(int i=1;i<n; i++) pre[i]=pre[i-1]+a[i];


    for(int i=1; i<n; i++){
        int w=k, sum=0, j=0, f=z, flag=0, f1=0, f2=0;

        sum= pre[min(w, i)];
        w-= (min(w, i));
       
        while(f>0 && w>0){  //cout<<"Rg";   
            flag=1;
            
            if(j%2==0){
            sum+= a[i-1];  
            f1=1;
            f2=0;
            f--;
             }
             
             else {
            sum+=a[i];
            f1=0;
            f2=1;
             }
            j++; 
            w--;
        }
     

        int l=0;
        if(!flag) l=i+1;
        else{
        if(f1) 
         l=i;
         else
         l=i+1;
        }
     
        sum+= (pre[l+w-1]- pre[l-1]);


        mxs=max(mxs, sum);
        
    }


    cout<<mxs<<endl;

}
return 0;
}
