#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
cin.ignore(100, '\n');
while(t--){
    int dp[10][10];
    vector<string> ar;

    
    rep(i,9){  string s=""; 
        getline(cin,s);
        ar.pb(s);
    }


     for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            dp[i+1][j+1]= (ar[i][j]- '0');
        }
    }   
    

    int count=1;
    for(int i=1;i<10;i++){
        for(int j=1;j<10;j++){
            if(count%3==1 ){
                if(count==1 && j==1){
                if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }
                else if(count==4 && j==2){
                   if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break; 
                }
                else if(count==7 && j==3){
                    if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }


            }else if(count%3==2){
                if(count==2 && j==4){
                 if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }
                else if(count==5 && j==5){
                    if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }
                else if(count==8 && j==6){
                    if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }


            }else if(count%3==0 ){
                if(count==3 && j==7){
                 if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;}

                else if(count==6 && j==8){
                    if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }
                else if(count==9 && j==9){
                    if(dp[i][j]==9) dp[i][j]=1;
                else dp[i][j]+=1;
                break;
                }
            }
            
        } count++;
    }
      for(int i=1;i<10;i++){
        for(int j=1;j<10;j++){
           cout<<dp[i][j];
        }cout<<endl;
    }

}
return 0;
}
