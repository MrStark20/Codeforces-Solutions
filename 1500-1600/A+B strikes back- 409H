#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

string a,b;
cin>>a>>b; 

    int l=a.size()-1,r=b.size()-1, prev=0;
    string ans="", carry="";
    while(l>=0 && r>=0){
        int s=(a[l]-'0')+ (b[r]-'0')+prev ;
        prev=0;
        if(s>9){
           carry= to_string(s); 
           if(l==0 && r==0){
               reverse(all(carry));
           ans+=carry;
           }else
           ans+= carry[carry.size()-1]; //cout<<ans<<endl;
           prev=carry[0]-'0';
        }
        else{
            ans+=to_string(s);
        }
        l--,r--;
    } 
    if(r>=0){
        int now= stoll(b.substr(0,r+1))+ prev;
        string nn=to_string(now);
        reverse(all(nn));
        ans+=nn ;
    }
    else if(l>=0){
        int now= stoll (a.substr(0,l+1))+prev;
        string nn=to_string(now);
        reverse(all(nn));
        ans+=nn;
    }
    reverse(all(ans));
    cout<<ans;

return 0;
}
