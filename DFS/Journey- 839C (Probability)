#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
vector<int> adj[(int)1e5+2];
vector<bool> vis((int)1e5+2, false);
vector<int> dis((int)1e5+2, 0);

vector< double> pro((int)1e5+2,0.0);

void dfs(int n, int prev){
    vis[n]=true;
    if(prev!=-1){
     if(prev==1)   
    pro[n]= (double)(pro[prev] / (adj[prev].size()));    
    else
     pro[n]= (double)((pro[prev] / (adj[prev].size()-1)));    
   
    }     
         if(n!=1)     
         dis[n]=1 + ((prev==-1)? 0 : dis[prev]); 
         
        for(auto i: adj[n]){
            if(!vis[i]){
               
                dfs(i, n);
                
            } 
        }
}
 
int32_t main(){
FastHoviBaby

int n;
cin>>n;

rep(i,n-1){
    int x,y;
    cin>>x>>y;

    adj[x].pb(y);
    adj[y].pb(x);
}

  

if(n==1){
    cout<<0.000000000<<endl;
    return 0;
}

int leaf=0;


 pro[1]=1; 


 dfs(1, -1) ; 

    double ans=0;

    for(int i=1; i<=n;i++){
        if(adj[i].size()==1){ 
        double x= pro[i]*dis[i];
        ans+=x;
        }

    }

 cout<<setprecision(12)<<fixed<<ans<<endl; 


return 0;
}
