#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
bool check(int n){
    n++;
    return ((n&n-1)==0);
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;
    int b= log2(n);

    int count=0;
    vector<int> ans;
    int flag=0;
    if(check(n)){
        cout<<0; 
        return 0;
    }

    while(true){
        
        b= log2(n);
        
        n=(n ^ ((1<<b+1)-1));
        count++;
        ans.pb(b+1);
     
        
        if(check(n)) break;

       
        n+=1;
        count++;
        if(check(n)) break;
        if(n<=1) break;
    }

    cout<<count<<endl;
    for(auto i: ans) cout<<i<<" ";

return 0;
}
   /////////////////////////////////////////////////////////////////////
   
   Here, In question we have to reach to a 2^n-1. So, we count the bits present in log2(7)=2.723 ~~ 2. So, (111) it has its leftmost bit after 2 bits.
   log2(39)= It's leftmost is 5. (100101) So, we check if it is 2^n-1 of a n=5; We find out that it's not then we do a XOR of it pow(2,(n+1))-1 . i.e (39^((2^6)-1)) 
   Repeat the process and keep on checking.
/////////////////////////////////////////////////////////////////////
