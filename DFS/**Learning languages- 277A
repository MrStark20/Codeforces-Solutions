#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n,m;
vector<int> adj[105];
vector<bool> vis(105, false);
void dfs( int n){
    vis[n]=true;

    for(auto child: adj[n]){
        if(!vis[child]){
            dfs(child);
        }
    }
}


int32_t main(){
FastHoviBaby


cin>>n>>m;
int ans=0;

set<int> s;
int k=m;
    rep(i,n){
        int x;
        cin>>x;  if(x==0){ ans++; adj[k-1].pb(k); adj[k].pb(k-1);  continue;}
        int prev;
        if(x>0) { cin>>prev; s.insert(prev);}
        rep(j,x-1){
            int y; cin>>y;   s.insert(y);
            adj[prev].pb(y);
            adj[y].pb(prev);
            prev=y;
           
        }
    }

    if(!s.empty()){
    dfs(*s.begin());
    for(auto it=s.begin(); it!=s.end();it++){
          if(!vis[*it]){
            ans++;  adj[*it].pb(*s.begin()); 
        
            dfs(*it); 
        }
    }
    }

  

    cout<<ans;


return 0;
}
