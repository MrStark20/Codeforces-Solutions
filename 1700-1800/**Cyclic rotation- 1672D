#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    
    int n;
    cin>>n;

    int a[n], b[n];
    rep(i,n) cin>>a[i];
    rep(i,n) cin>>b[i];

      int l=0,r=0, chara=0;

      int flag=0;

    multiset<int> s;

    int j=0;

    rep(i,n){
        if(b[j]==a[i]){
            j++;
        }else{
            if( (i> 0 && a[i-1]==b[j]  && s.find(a[i-1])!= s.end()  )){
                s.erase(s.find(a[i-1]));
                j++;
                i--;
            }else{
                s.insert(a[i]);
            }
        }
    }

    while(j<n && a[n-1]==b[j] &&  s.find(a[n-1])!= s.end()   ) {
        s.erase(s.find(a[n-1]));
        j++;
    }

    if(j==n) cout<<"YES"<<endl;
    else cout<<"NO"<<endl;

}
return 0;
}

//////////////////////////////////////

5
1 2 4 2 1
4 2 2 1 1

Here, we keep on increasing j if a[i]==b[j]... 
                                        If not then keep on inserting if we could't find a[i-1] in multiset if a[i-1]==b[j].
                                        
                                         At the end if everything is in order. Our j will reach n.
