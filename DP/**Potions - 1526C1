#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n;
vector<int> a(2e3+ 5, 0);
 
const int INF = 1e18;
 
vector<vector<int>> dp(2005, vector<int>(2005, 0 ));
vector<vector<bool>> vis(2005, vector<bool>(2005, false ));
 
int check(int c, int d){
   
    if(c==0){
        return  d== 0 ? 0 : -INF;
    }
    if(d==0){
        return  0;
 
    }
    

 
    if(vis[c][d])
        return dp[c][d];
 
        if(a[c]>=0)
        dp[c][d]=  a[c] + check(c-1, d-1);
    
 
    if(check(c-1, d-1) +a[c]>=0)    
     dp[c][d]=  max(  a[c] + check(c-1, d-1 ),  check(c-1, d));
    else
     dp[c][d]= check(c-1, d);
    
    vis[c][d]=true;
    return dp[c][d];
}
 
 
int32_t main(){
FastHoviBaby
 
cin>>n;
rep(i, n) cin>>a[i+1];
 
 
 
int mx=INT_MIN;
 
    for(int i=n; i>=0; i--){
        if(check(n,i) >=0) {
            cout<<i;
            break;
        }
    }
 
  
 
return 0;
}
