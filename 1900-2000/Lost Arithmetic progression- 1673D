#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}

int lcm(int a, int b){
    return (a*b)/ gcd(a,b);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    
    int b1, bd, bt;
    cin>>b1>>bd>> bt;

    int c1,cd, ct;
    cin>>c1>>cd>>ct;

    if(c1<b1 || bd> cd){
         cout<<0<<endl;
        continue;
    }
    else if((b1+((bt-1)*bd)) < (c1 + ((ct-1)*cd))){
        cout<<0<<endl;
        continue;
    }

    if(cd% bd != 0) {
         cout<<0<<endl;
        continue;
    }

    if(abs( b1- c1) % gcd(bd,cd)  !=0){
        cout<<0<<endl;
        continue;
    }

    if(b1> c1-cd || (b1+(bt*bd)) <= (c1 + (ct*cd))){
    cout<<"-1"<<endl;
        continue;
    }

    vector<int> div;

    for(int i=1; i*i<=cd; i++){
        if(cd%i ==0 && i != cd/i){
            div.pb(i);
            div.pb(cd/i);
        }else if( cd%i ==0 && i == cd/i){
             div.pb(i);
        }
    }
    sort(all(div));
   
    int ans=0;

    rep(i, div.size()){ 

            if(lcm(bd, div[i])==cd ){
            
                (ans+= ((cd)/div[i])%mod  * (((cd)/div[i])%mod)%mod) %=mod ;
            }

    }



    cout<<ans<<endl;
}
return 0;
}
