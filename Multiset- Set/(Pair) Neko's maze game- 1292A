#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n,q;
cin>>n>>q;
    char a[3][n+1];
    for(int i=1;i<=2;i++){
        for(int j=1;j<=n;j++){
            a[i][j]='F';
        }
    }
    multiset<pair<int,int> > m;
    while(q--){
        int x,y;
        cin>>x>>y;

        if(a[x][y]=='F'){ a[x][y]='L';
        // else a[x][y]='F';

        if(x-1>=1 && y-1>=1 && a[x-1][y-1]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x-1, y-1)); 
        }
         if(x-1>=1  && a[x-1][y]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x-1, y)); 
        }
         if(x+1<=2  && a[x+1][y]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x+1, y)); 
        }
         if(y+1<=n  && x-1>=1 && a[x-1][y+1]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x-1, y+1));
        }
         if(x+1<=2  && y-1>=1 &&  a[x+1][y-1]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x+1, y-1));
        }
          if(x+1<=2  && y+1<=n &&  a[x+1][y+1]=='L' &&  a[x][y]=='L') {
            m.insert(mp(x,y)); m.insert(mp(x+1, y+1));
        }

        }else {
               if(x-1>=1 && y-1>=1 && a[x-1][y-1]=='L' &&  a[x][y]=='L') {
           if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x-1,y-1))!=m.end())
            m.erase(m.find(make_pair(x-1,y-1)));
            
        }
         if(x-1>=1  && a[x-1][y]=='L' &&  a[x][y]=='L') {
             if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x-1,y))!=m.end())
            m.erase(m.find(make_pair(x-1,y)));
        }
         if(x+1<=2  && a[x+1][y]=='L' &&  a[x][y]=='L') {
             if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x+1,y))!=m.end())
            m.erase(m.find(make_pair(x+1,y)));
        }
         if(y+1<=n  && x-1>=1 && a[x-1][y+1]=='L' &&  a[x][y]=='L') {
             if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x-1,y+1))!=m.end())
            m.erase(m.find(make_pair(x-1,y+1)));
        }
         if(x+1<=2  && y-1>=1 &&  a[x+1][y-1]=='L' &&  a[x][y]=='L') {
             if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x+1,y-1))!=m.end())
            m.erase(m.find(make_pair(x+1,y-1)));
        }
          if(x+1<=2  && y+1<=n &&  a[x+1][y+1]=='L' &&  a[x][y]=='L') {
              if(m.find(make_pair(x,y))!=m.end())
            m.erase(m.find(make_pair(x,y)));

             if(m.find(make_pair(x+1,y+1))!=m.end())
            m.erase(m.find(make_pair(x+1,y+1)));
        }

        a[x][y]='F';
        }

            
            if(m.size()==0) cout<<"Yes"<<endl;
            else cout<<"No"<<endl;
        }

    
return 0;
}
