#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
 
int32_t main(){
FastHoviBaby
 
 
int t=1;
cin>>t;
while(t--){
    
    int n, o;
    cin>>n>>o;
 
    string s;
    cin>>s;
 
    multiset<int> m;
 
    
    int mxl = -1, index=0;
 
    rrep(i ,n){
        if(s[i]=='1'){
            mxl= (n-i-1);
            index=i;
            break;
        }
    }
 
    if(mxl==-1){
        cout<<0<<endl;
        continue;
    }
 
    int oc=0;
   
    if(mxl!=0 &&  mxl<=o){   
        s[index]='0';
        s[n-1]='1';  
        o-=mxl;
    }
    
    int gap=0;
 
    rep(i,n-1){
        if(s[i]=='0') gap++;
        else{
            if(o-gap<0) break;
            else if(gap!=0){   //cout<<mxl<<" mxl"<<endl;
                o-=gap;
                s[i-gap]='1';
                s[i]='0';
                
            }
        }
    }
 

   
 
    rep(i, n-1){
        string k=""; k+=s[i]; k+=s[i+1];
        int x= stoll(k);
        m.insert(x);
    }
 

    int sum=0;
 
    for(auto i: m) {
        sum+=(i);  
        }
 
  
 
    cout<<sum<<endl;
 
 
}
return 0;
}
