#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n,m;
    cin>>n>>m;

    vector<int> a(n);
    ll sum=0;
    rep(i,n) {
        cin>>a[i];
        sum+=a[i];
    }
    if(sum<= m) {
        cout<<1<<"\n";
        continue;
    }

    set<pair<int,int>> s;
    map<int,int> map1;

    ll now=0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > lol;

    rep(i,n){
        lol.push({a[i], i});
    }
    int d_total=m;
        while(!lol.empty()&&  d_total>=0){
            pair<int,int> x= lol.top();
            lol.pop();

            if(d_total-x.ff>=0) {map1[x.ss]++; s.insert({x.ff, x.ss});  d_total-=x.ff; }
            else break;
        }
    

    int l=-1, r= n;

    int flag=0;

    while(r-l>1){

        int mid= (l+r)/2;

        int freq= mid, freq2=mid;


        if(map1.find(mid)==map1.end() && s.size()>0){

        pair<int,int> keep= *(--s.end());

            if(keep.ff + d_total>= a[mid]  ) freq=freq;
            else freq++;

        }


        if(mid==0 ){
            if(s.size()>=1){
              flag=1;
                l=mid;  
            }else{
                r=mid;
            }
        }else{    
        if(s.size()>= freq) {
            flag=1;
            l=mid;
        }else{
            r=mid;
        }
        }
        

    }

    if(!flag) cout<<n+1<<"\n";
    else
    cout<<n-l<<"\n";

}
return 0;
}
