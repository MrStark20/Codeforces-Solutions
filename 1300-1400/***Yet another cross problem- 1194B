#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first < b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,m;
    cin>>n>>m;

    cin.ignore();
    vector<pair<int,int> > col;
    char a[n][m];


    bool b[n][m]={false}; 

    rep(i,n){
        string s;
        cin>>s;
        int count=0,k=0;
        rep(j,m){
            a[i][j]=s[j]; 
            if(s[j]=='*') count++;
        }
        col.pb(mp(m-count, i));
    }
    vector<pair<int,int>> row;
    int f2=0,flag=0;

    rep(i,m){
        int count=0,k=0;
        rep(j,n){ 
            if(a[j][i]=='*') count++;
            if(a[j][i]=='.') k=j;
        }
        
        
        row.pb(mp(n-count, i));
    }

    sort(all(row));
    sort(all(col));
    int ans=row[0].ff+col[0].ff;
   

     rep(i,col.size()){
         rep(j,row.size()){
             if( col[i].ff!=col[0].ff){
                 f2=1;
                 break;
             }else if(row[j].ff!=row[0].ff ) break;


             if(a[col[i].ss][row[j].ss]=='.') {flag=1; break;}
         }
         if(f2 || flag) break;
     }

    if(flag)
    ans--;
    cout<<ans<<endl;

}
return 0;
}
