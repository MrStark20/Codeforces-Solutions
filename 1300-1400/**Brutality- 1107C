#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

int n, k;
cin>>n>>k;

int a[n];
rep(i,n) cin>>a[i];
string s;
cin>>s;

    int ans=0,count=1,sum=0;


    int l=0,flag=0;
     vector<int> c;
    while(true){
        
       
        c.clear();
        if((l+1<n) && s[l]==s[l+1]){
            char d=s[l];
            while(d==s[l]){
                c.pb(a[l]);
                l++;
                if(n==l){flag=1; break;}
            } 

            sort(all(c),greater<int>());
            int x=min(k, (int)c.size());
            rep(i, x ) ans+=c[i];
        }else{
         
        ans+=a[l];
         l++; if(l==n){flag=1; break;}  
        }
            if(flag) break;
    }
    cout<<ans;

return 0;
}
