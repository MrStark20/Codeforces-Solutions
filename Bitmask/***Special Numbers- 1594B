
//////////////////////////////////
n=3 k=5

1,3,9,27
1,  3,4,  9,10,12,13   ,27,28,30,31,36,37,39,40
1   2 3   4  5  6  7    8  9  10 11...........

Here is a pattern for every segment, the index is equal to 2^x and that same index is on n^x.
2^2=4;
3^2=9,

2^3=8
3^3=27

and after that index, all value from left gets added to that n^x, one by one. So, our target is to find that lowest or equal power of 2 than 'k'.

For that we can use inbuilt c++ - 31-__builtin_clz(k)
  and we will keep on reducing k with n^x.
  
and numbers can be really big. So, we have to bring it down using application of mod.
https://cp-algorithms.com/algebra/binary-exp.html

To calculate big powers we use binary exponentiation, which can also be find in this article.
  
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
     int n,k;
    cin>>n>>k;
    int ans=0, t=0,a=0;

    while(k>0){
        t= 31- __builtin_clz(k);
        ans+=  (modp(n, t, mod));
        k-= (1<<t); 

    }
    cout<<ans%mod<<endl;
}
return 0;
}
