#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){

    int n, x;
    cin>>n>>x;

    vector<int> a(n);

    int mx=INT_MIN, mi= INT_MAX;

    int ans=0;
    rep(i,n){
        cin>>a[i];
        mx=max(mx, a[i]);
        mi= min(mi, a[i]);
    }

    rep(i, n-1){
        ans+= abs(a[i]- a[i+1]);
    }

    if(mi<=1 && mx>=x){
        cout<<ans<<endl;
        continue;
    }

    if(mi<=1 && mx<x){


       int  mini=INT_MAX, index=0;
       mini= abs(x- a[0]);
       if(abs(a[n-1]- x)<mini){
           mini= abs(a[n-1]- x);
           index=n-1;
       }

         rep(i, n-1){
        if(   abs(abs(a[i]-a[i+1])   -    (abs(a[i]- x) + abs(a[i+1]-x)))<mini){
            mini=  abs(abs(a[i]-a[i+1])   -    (abs(a[i]- x) + abs(a[i+1]-x)));
            index= i;
            }
        }

        ans+= mini;
        cout<<ans<<endl;
        continue;
    }
    else if(mi>1 && mx>=x){

         int  mini=INT_MAX, index=0;
       mini= abs(1- a[0]);
       if(abs(a[n-1]- 1)<mini){
           mini= abs(a[n-1]- 1);
           index=n-1;
       }

         rep(i, n-1){
        if( abs( abs(a[i]-a[i+1])   -     (abs(a[i]- 1) + abs(a[i+1]-1)) )<mini){

            mini=   abs( abs(a[i]-a[i+1])   -     (abs(a[i]- 1) + abs(a[i+1]-1)) ); 
            index= i;
            }
        }

        ans+= mini;
        cout<<ans<<endl;
        continue;
    }

    else{

          int  mini=INT_MAX, index=0;
       mini= abs(x- a[0]);
       if(abs(a[n-1]- x)<mini){
           mini= abs(a[n-1]- x);
           index=n;
       }

         rep(i, n-1){
        if( abs(abs(a[i]-a[i+1])   -    (abs(a[i]- x) + abs(a[i+1]-x)))<mini){
            mini=  abs(abs(a[i]-a[i+1])   -    (abs(a[i]- x) + abs(a[i+1]-x)));
            index= i+1;
            }
        }

        ans+= mini;
        a.insert(a.begin()+ index, x);

         mini=INT_MAX, index=0;
       mini= abs(1- a[0]);
       if(abs(a[n]- 1)<mini){
           mini= abs(a[n]- 1);
           index=n;
       }

         rep(i, n){
        if( abs( abs(a[i]-a[i+1])   -     (abs(a[i]- 1) + abs(a[i+1]-1)) )<mini){

            mini=   abs( abs(a[i]-a[i+1])   -     (abs(a[i]- 1) + abs(a[i+1]-1)) ); 
            index= i;
            }
        }

          ans+= mini;
        cout<<ans<<endl;

    }


}
return 0;
}
