#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int n,m;
bool Square( vector<vector<int>>d, int x,int y){

    if(x+1<=n && y+1<=m){
        if(d[x][y]==1 && d[x+1][y]==1 && d[x][y+1]==1 && d[x+1][y+1]==1 ) return true;
    }
    return false;
}

int32_t main(){
FastHoviBaby


cin>>n>>m;

    vector<vector<int>> d(n+1, vector<int> (m+1));
    map< vector<vector<int>> , int> mpp;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>d[i][j];
        }
    }
    char st[n+1][m+1]= {};

        int flag=0;
        vector<pair<int,int>> ans;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(d[i][j]==1){
                    if( Square( d, i, j) || Square(d,i-1,j) || Square(d,i,j-1)|| Square(d, i-1,j-1)){
                        if(Square( d, i, j)){
                            if(st[i][j]!='*'){
                                ans.pb(mp(i, j));
                                st[i][j]='*';
                            }
                            else if( Square(d,i-1,j)){
                                if(st[i-1][j]!='*'){
                                ans.pb(mp(i-1, j));
                                st[i-1][j]='*';
                            }
                            }else if( Square(d,i,j-1)){
                                  if(st[i][j-1]!='*'){
                                ans.pb(mp(i, j-1));
                                st[i][j-1]='*';
                            }
                            }else if(Square(d, i-1,j-1)){
                                 if(st[i-1][j-1]!='*'){
                                ans.pb(mp(i-1, j-1));
                                st[i-1][j-1]='*';
                            }
                            }
                        }

                    }else{
                        flag=1;
                        break;
                    }
                }
        }
        if(flag) break;
      }
      if(flag) cout<<"-1";
      else{
          cout<<ans.size()<<endl;
          rep(i,ans.size()) cout<<ans[i].ff<<" "<<ans[i].ss<<endl;
      }

return 0;
}
