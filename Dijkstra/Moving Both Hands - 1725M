#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova

int n,e;
cin>>n>>e;

    vector<vector<pair<int,int>>> adj(n+1, vector<pair<int,int>>() );
    vector<vector<pair<int,int>>> adj2(n+1, vector<pair<int,int>>() );

    rep(i,e){
        int x,y,z;
        cin>>x>>y>>z;

        adj[x].pb(mp(y,z));
        adj2[y].pb(mp(x,z));
    }

    // for(int i=1;i<=n ;i++){
    //     cout<<i<<" : ";
    //     rep(j, adj[i].size()) cout<<adj[i][j].ff<<" "<<adj[i][j].ss<<endl;
    // }

    set<pair<int,int>> s;
    vector<int> dis(n+1, 1e18+1);

    dis[1]=0;
    s.insert({0, 1});

    while(!s.empty()){
        pair<int,int> p= *(s.begin());
        s.erase(p);

        if(dis[p.ss] > p.ff) continue;
        for(int i=0 ;i<adj[p.ss].size() ; i++ ){
            if(p.ff + adj[p.ss][i].ss <  dis[adj[p.ss][i].ff]){

                dis[adj[p.ss][i].ff]= p.ff+adj[p.ss][i].ss;    
                s.insert(mp(p.ff + adj[p.ss][i].ss, adj[p.ss][i].ff));

            }
        }
    }

    for(int i=1;i<=n; i++ ) s.insert(mp(dis[i], i));
    adj=adj2;
    while(!s.empty()){
        pair<int,int> p= *(s.begin());
        s.erase(p);
        
        if(dis[p.ss] > p.ff) continue;
        for(int i=0 ;i<adj[p.ss].size() ; i++ ){
            if(p.ff + adj[p.ss][i].ss <  dis[adj[p.ss][i].ff]){

                dis[adj[p.ss][i].ff]= p.ff+adj[p.ss][i].ss;    
                s.insert(mp(p.ff + adj[p.ss][i].ss, adj[p.ss][i].ff));

            }
        }
    }


    for(int i=2;i<=n;i++){
        if(dis[i]==1e18 +1) cout<<-1<<" ";
        else cout<<dis[i]<<" ";
    }

return 0;
}


////////////////////////////

1st we calculate minimum distance to every point from 1.

We will reach by moving our left hand there, now we try to make move from our right hand from all such minimum points. 
