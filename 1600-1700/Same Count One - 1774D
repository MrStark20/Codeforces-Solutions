#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
Jhunjhar_Hova


int t=1;
cin>>t;
while(t--){
    
    int n,m;
    cin>>n>>m;

    vector<vector<int>> g(n, vector<int>(m) );

    int oc=0;
     map<int, int> row; 
    rep(i,n){
        rep(j,m){
            cin>>g[i][j];
            if(g[i][j]==1) { row[i]++; oc++;}
        } 
    }

    if(oc%n!=0){
        cout<<-1<<"\n";
        continue;
    }

    int fixed= oc/n;

    vector<int> less, more;



    rep(i,n){
            if( row[i]<fixed){
                less.pb(i);
            }
            if( row[i]>fixed){
                more.pb(i);
            }
        
    }

    vector<pair<int, pair<int,int>>> ans;

    int i=0, j=0, k=0;
    while( i<less.size() && j<more.size() ){

        int need= fixed - row[less[i]];


                while(k<m){
                    if(g[less[i]][k]==0 && g[more[j]][k]==1 && row[more[j]]>fixed && need>0){
                        g[less[i]][k]=1;
                        g[more[j]][k]=0;
                        ans.pb({less[i]+1, {more[j]+1, k+1}});
                        need--;
                        row[less[i]]++;
                        row[more[j]]--;
                    }
                    
                    if(need==0 || row[more[j]]==fixed) break;
                    k++;
                }
                if(k==m){
                    if(row[more[j]]==fixed) j++; k=0;
                }else if(need>0 ) { if(row[more[j]]==fixed)j++; k=0;}

            if(need==0) i++;

    }

    cout<<ans.size()<<"\n";

    rep(i, ans.size()){
        cout<<ans[i].ff<<" "<<ans[i].ss.ff<<" "<<ans[i].ss.ss<<"\n";
    } 


   
}
return 0;
}
