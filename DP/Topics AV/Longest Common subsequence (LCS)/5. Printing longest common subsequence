It's the same as LCS length. But we have to do Bottom up implementation, once we have the answer.

    So, make sure you see the table once. Before going into code.
    If both equal move i-1,j-1 else move in direction of maximum. 
    
    Ex- sbohpariti
          bharti
 outcome- bharti   
 
 
 
 Better recursive approach - 
 
 
 vector<int> ans;
vector<vector<int>> dp;
int mx;

int recur(int i, int j, vector<int> &a, vector<int> &b){
    if(i==a.size() || j==b.size() ){
        
        return 0;
    }
    if(dp[i][j]!=-101) return dp[i][j];
    
    if(a[i]==b[j]){
    dp[i][j]= 1+ recur(i+1, j+1, a,b);
    }else 
    dp[i][j]= max(recur(i, j+1, a, b), recur(i+1, j, a,b));
        
        return dp[i][j];
}


vector<int> longestCommonSubsequence(vector<int> a, vector<int> b) {
    mx=0;
    dp.assign(a.size()+1, vector<int>(b.size()+1, -101));
    vector<int> c;
    int x= recur(0, 0, a, b );
 
    
    rep(i,a.size()){
        rep(j,b.size()){
            if(dp[i][j]==x && a[i]==b[j]){
                x--;
                c.pb(a[i]);
            }
        }
    }
    
    return c;
}
    
  ------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------
  ---------------------------------------------------------------------------------------------
  
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  
  
    #include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby

string s,t;
cin>>s>>t;

    int n=s.size(), m=t.size();
vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){

               if(s[i-1]==t[j-1])
               dp[i][j]=1+dp[i-1][j-1];

               else
               dp[i][j]= max(dp[i-1][j], dp[i][j-1]);
        }
    }

    string ans="";
    while(n>0 && m>0){

        if(s[n-1]==t[m-1]){
            ans+=s[n-1];
            n--; m--;
        }
        else{
            if(dp[n-1][m]>=dp[n][m-1]){
                n--;
            }else{
                m--;
            }
        }
    }

    reverse(all(ans));
    cout<<ans;


return 0;
}
