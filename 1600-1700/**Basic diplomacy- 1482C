#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n,m;
    cin>>n>>m;

    map<int,int> m1;
    map<int,int> m2;
     vector<int> g[m];
    int flag=0;


     rep(i,m){
         int k;
         cin>>k;
         rep(j,k){
             int x;
             cin>>x;
             g[i].pb(x);
             m2[x]++;
         }
     }
    int limit= ceil((1.0*m)/2); 
    vector<int> ans(m);
    rep(i,m){

        if(g[i].size()==1){
            ans[i]=g[i][0];    
            m1[g[i][0]]++;
        }
        
    }
    for(auto i: m1){
        if(i.ss>limit){
            flag=1;
        }
    }

    if(flag) {
        cout<<"NO"<<endl;
        continue;
    }
    int f2=0;
    rep(i,m){
        int flag=0;
        if(g[i].size()==1) continue;
        rep(j, g[i].size()){
              if(m1[g[i][j]]+1<= limit){
                  ans[i]=g[i][j];
                  flag=1;
                    m1[g[i][j]]++;
                    break;
              }  
        }
        if(!flag) f2=1;
    }

     if(f2) {
        cout<<"NO"<<endl;
        continue;
    }

    
        cout<<"YES"<<endl;
        for(auto i: ans) cout<<i<<" ";
        cout<<endl;
    


}
return 0;
}

//////////////////////////////////////////////////////////////
Greedy- 

Here it is guranteed that if only one friend is available on a day. Then such friend's total count should be less than ceil(m/2). Once it is done we will always
have the option to choose from two or more friends available to fulfill the outcome.
