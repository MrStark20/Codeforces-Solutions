#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
 
int32_t main(){
FastHoviBaby
 
string s;
cin>>s; 
 
int dp[100005];
dp[1]=1;
dp[2]=2;
    for(int i=3;i<=100005;i++){
        dp[i]=(dp[i-2]%mod +dp[i-1]%mod)%mod;
    }
 
    if(count(all(s), 'w')>0 || count(all(s), 'm')>0) { cout<<0; return 0;}
    int ans=1, n=s.size();
 
    rep(i,n){
        if(s[i]=='n'){
            int d=0, j=0;
            for( j=i;j<n;j++){
                if(s[j]=='n') d++;
                else break;
            }
            ans*= dp[d]; 
            ans%=mod;  
            i=j-1;
        }
        if(s[i]=='u'){
            int d=0, j=0;
            for( j=i;j<n;j++){
                if(s[j]=='u') d++;
                else break;
            }
            ans*= dp[d]; 
            ans%=mod;   
            i=j-1;
        }
        
    }
    ans%=mod;
    cout<<ans;
 
return 0;
}
