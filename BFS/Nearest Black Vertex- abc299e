#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
 
ll npow(ll a, ll b) { 
if(b==0) return 1;   ll res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }
 
 
ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
 
 
bool myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}
 
 
ll gcd(ll a , ll b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}
 
 
bool isPrime(ll n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
 
vector<vector<ll>> adj;
vector<bool> black;
int N;
vector<ll> recur(int n, int d){
 
    vector<ll> dis(N+1, 1e10);
 
    dis[n]=0;
    queue<ll> q;
    q.push(n);
    while(!q.empty()){
        ll x= q.front();
        q.pop();
        if(dis[x]<d){
            black[x]= false;
        }
        for(auto i: adj[x]){
 
            if(dis[x]+1<dis[i]){
                dis[i] = dis[x]+1;
                q.push(i);
            }
        }
 
    }
 
    return dis;
 
}
 
int32_t main(){
Jhunjhar_Hova
 
    int n,m;
    cin>>n>>m;
    N=n;
    adj.assign(n+1, vector<ll>{});
    rep(i,m){
        ll u,v;
        cin>>u>>v;
 
        adj[u].pb(v);
        adj[v].pb(u);
    }
 
    ll k;
    cin>>k;
    black.assign(n+1, true);
    vector<int> p(k+1), d(k+1);
    for(int i=1;i<=k; i++){
        cin>>p[i]>>d[i];
        
        vector<ll> lol= recur(p[i], d[i]); 
 
    }
    vector<int> dis(n+1, 1e10);
    queue<ll> q;
    for(int i=1;i<=n ;i++){
        if(black[i]==true){
            dis[i]=0;
            q.push(i);
        }
    }
 
    while(!q.empty()){
        int x= q.front();
        q.pop();
        for(auto i: adj[x]){
            if(dis[i]>dis[x]+1){
                dis[i]= dis[x]+1;
                q.push(i);
            }
        }
    }
 
    ll flag=0;
    for(int i=1;i<=k; i++){
        if(dis[p[i]]!=d[i]) {flag=1; break;}
    }
 
    if(flag) cout<<"No";
    else{
        cout<<"Yes\n";
        for(int i=1;i<=n;i++) cout<<black[i];
    }
 
 
 
return 0;
}
