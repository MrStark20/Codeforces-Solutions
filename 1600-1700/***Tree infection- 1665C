#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}

int32_t main(){
FastHoviBaby


int t=1;
cin>>t;
while(t--){
    int n;
    cin>>n;

    int a[n-1];
    map<int,int> m;
    set<int>s;
    rep(i,n-1){
    cin>>a[i];
    m[a[i]]++;
    s.insert(a[i]);
    }
    vector<int> c;

    for(auto i: m){
        c.pb(i.ss);
    }

    sort(all(c), greater<int>());
    

    sort(a,a+(n-1));
    int l=1,r=2e5+ 10;

  
        int mi= (s.size()+1);
        int flag=0;

       

        priority_queue<int> pq;

        for(int i=0;i<c.size();i++){
            c[i]-= ((mi-i));  
            if(c[i]>0) pq.push(c[i]);
        }

        int d=0;
        while(!pq.empty() ){
            int x= pq.top();
             pq.pop();
             if(x>d){
                 d++;
                 x--;
             }

             if(x>d)
             pq.push(x);

        }

       
    
        cout<<mi+d<<endl;
}
return 0;
}
