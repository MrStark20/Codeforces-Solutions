#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define FastHoviBaby ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int npow(int a, int b) { 
if(b==0) return 1;   int res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


int modp(int a,int b,int m){ 
 a %= m;     int res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<int, int>& a, const pair<int, int>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


int gcd(int a , int b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(int n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}   
const int N=1e5+7;
vector<int> adj[N];
vector<bool> vis(N, false);
vector<int> init(N);
vector<int> goal(N);
vector<int> ans;
void dfs(int k, int odd,int even){
    vis[k]=true;
    init[k] ^=odd;
    ////////////// We first correct the parent and go out for child. If diff then goal, we change the parity for all upcoming sons.(Those fixed and also unfixed)
    if(init[k]!= goal[k]){
        ans.pb(k);
        odd^=1;
    }
    for(auto child: adj[k]){
        if(!vis[child]){
            dfs(child, even, odd);
        }
    }
}

int32_t main(){
FastHoviBaby

int n;
cin>>n;
    rep(i,n-1){
        int x,y;
        cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
    }
    rep(i,n){
        cin>>init[i+1];
    }
    rep(i,n) cin>>goal[i+1];
    dfs(1, 0,0);

    cout<<ans.size()<<endl;
    for(auto i: ans) cout<<i<<endl;

return 0;
}
